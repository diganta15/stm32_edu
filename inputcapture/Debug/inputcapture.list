
inputcapture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002e4  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000478  08000478  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000478  08000478  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000478  08000478  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000478  08000478  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000478  08000478  00001478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800047c  0800047c  0000147c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000480  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  08000484  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000484  00002028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001513  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000057c  00000000  00000000  00003547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e8  00000000  00000000  00003ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000153  00000000  00000000  00003cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e170  00000000  00000000  00003e03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000020a2  00000000  00000000  00011f73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080027  00000000  00000000  00014015  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009403c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000578  00000000  00000000  00094080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000945f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000460 	.word	0x08000460

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08000460 	.word	0x08000460

080001d4 <main>:

int timestamp = 0;


//setup connection between pa5 to pa6
int main(void){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  tim2_output_compare();
 80001d8:	f000 f856 	bl	8000288 <tim2_output_compare>
  tim_pa6_input_capture();
 80001dc:	f000 f896 	bl	800030c <tim_pa6_input_capture>

  while(1){
    //wait until edge is captured
    while(!(TIM3->SR & TIM_SR_CC1IF)){}
 80001e0:	bf00      	nop
 80001e2:	4b06      	ldr	r3, [pc, #24]	@ (80001fc <main+0x28>)
 80001e4:	691b      	ldr	r3, [r3, #16]
 80001e6:	f003 0302 	and.w	r3, r3, #2
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d0f9      	beq.n	80001e2 <main+0xe>
    //read value
    timestamp = TIM3->CCR1;
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <main+0x28>)
 80001f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80001f2:	461a      	mov	r2, r3
 80001f4:	4b02      	ldr	r3, [pc, #8]	@ (8000200 <main+0x2c>)
 80001f6:	601a      	str	r2, [r3, #0]
    while(!(TIM3->SR & TIM_SR_CC1IF)){}
 80001f8:	e7f2      	b.n	80001e0 <main+0xc>
 80001fa:	bf00      	nop
 80001fc:	40000400 	.word	0x40000400
 8000200:	20000020 	.word	0x20000020

08000204 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000208:	bf00      	nop
 800020a:	e7fd      	b.n	8000208 <NMI_Handler+0x4>

0800020c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000210:	bf00      	nop
 8000212:	e7fd      	b.n	8000210 <HardFault_Handler+0x4>

08000214 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000218:	bf00      	nop
 800021a:	e7fd      	b.n	8000218 <MemManage_Handler+0x4>

0800021c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000220:	bf00      	nop
 8000222:	e7fd      	b.n	8000220 <BusFault_Handler+0x4>

08000224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000224:	b480      	push	{r7}
 8000226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000228:	bf00      	nop
 800022a:	e7fd      	b.n	8000228 <UsageFault_Handler+0x4>

0800022c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000230:	bf00      	nop
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr

0800023a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800023a:	b480      	push	{r7}
 800023c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800023e:	bf00      	nop
 8000240:	46bd      	mov	sp, r7
 8000242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000246:	4770      	bx	lr

08000248 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800024c:	bf00      	nop
 800024e:	46bd      	mov	sp, r7
 8000250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000254:	4770      	bx	lr

08000256 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000256:	b580      	push	{r7, lr}
 8000258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800025a:	f000 f8c9 	bl	80003f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800025e:	bf00      	nop
 8000260:	bd80      	pop	{r7, pc}
	...

08000264 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000268:	4b06      	ldr	r3, [pc, #24]	@ (8000284 <SystemInit+0x20>)
 800026a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800026e:	4a05      	ldr	r2, [pc, #20]	@ (8000284 <SystemInit+0x20>)
 8000270:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000274:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000278:	bf00      	nop
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	e000ed00 	.word	0xe000ed00

08000288 <tim2_output_compare>:
 *      Author: digantadas
 */

#include "tim.h"

void tim2_output_compare(void){
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
    //enable clock access to GPIOA
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800028c:	4b1d      	ldr	r3, [pc, #116]	@ (8000304 <tim2_output_compare+0x7c>)
 800028e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000290:	4a1c      	ldr	r2, [pc, #112]	@ (8000304 <tim2_output_compare+0x7c>)
 8000292:	f043 0301 	orr.w	r3, r3, #1
 8000296:	6313      	str	r3, [r2, #48]	@ 0x30

    //set PA5 to alternate function mode
    GPIOA->MODER &=~(1U<<10);
 8000298:	4b1b      	ldr	r3, [pc, #108]	@ (8000308 <tim2_output_compare+0x80>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a1a      	ldr	r2, [pc, #104]	@ (8000308 <tim2_output_compare+0x80>)
 800029e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80002a2:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=(1U<<11);
 80002a4:	4b18      	ldr	r3, [pc, #96]	@ (8000308 <tim2_output_compare+0x80>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a17      	ldr	r2, [pc, #92]	@ (8000308 <tim2_output_compare+0x80>)
 80002aa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80002ae:	6013      	str	r3, [r2, #0]

    //set PA5 alternate function type to TIM2_CH1 (AF01)
    GPIOA->AFR[0] = (1U<<20);
 80002b0:	4b15      	ldr	r3, [pc, #84]	@ (8000308 <tim2_output_compare+0x80>)
 80002b2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80002b6:	621a      	str	r2, [r3, #32]
     //enable clock access to tim2
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80002b8:	4b12      	ldr	r3, [pc, #72]	@ (8000304 <tim2_output_compare+0x7c>)
 80002ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002bc:	4a11      	ldr	r2, [pc, #68]	@ (8000304 <tim2_output_compare+0x7c>)
 80002be:	f043 0301 	orr.w	r3, r3, #1
 80002c2:	6413      	str	r3, [r2, #64]	@ 0x40

    //set prescaler value
    TIM2->PSC = 1600-1;
 80002c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002c8:	f240 623f 	movw	r2, #1599	@ 0x63f
 80002cc:	629a      	str	r2, [r3, #40]	@ 0x28
    //set auto reload value
    TIM2->ARR = 10000-1;
 80002ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002d2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80002d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    //set output compare toggle mode
    TIM2->CCMR1 = (1U<<4)|(1U<<5);
 80002d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002dc:	2230      	movs	r2, #48	@ 0x30
 80002de:	619a      	str	r2, [r3, #24]

    //enable tim2 ch1 in compare mode
    TIM2->CCER = TIM_CCER_CC1E;
 80002e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002e4:	2201      	movs	r2, #1
 80002e6:	621a      	str	r2, [r3, #32]

    //clear counter
    TIM2->CNT = 0;
 80002e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002ec:	2200      	movs	r2, #0
 80002ee:	625a      	str	r2, [r3, #36]	@ 0x24

    //enable timer
    TIM2->CR1 = TIM_CR1_CEN;
 80002f0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002f4:	2201      	movs	r2, #1
 80002f6:	601a      	str	r2, [r3, #0]
}
 80002f8:	bf00      	nop
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	40023800 	.word	0x40023800
 8000308:	40020000 	.word	0x40020000

0800030c <tim_pa6_input_capture>:

void tim_pa6_input_capture(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
    // enable clock access to GPIOA
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000310:	4b1f      	ldr	r3, [pc, #124]	@ (8000390 <tim_pa6_input_capture+0x84>)
 8000312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000314:	4a1e      	ldr	r2, [pc, #120]	@ (8000390 <tim_pa6_input_capture+0x84>)
 8000316:	f043 0301 	orr.w	r3, r3, #1
 800031a:	6313      	str	r3, [r2, #48]	@ 0x30

    // set PA6 to aternate function mode
    GPIOA->MODER &= ~(1U << 12);
 800031c:	4b1d      	ldr	r3, [pc, #116]	@ (8000394 <tim_pa6_input_capture+0x88>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a1c      	ldr	r2, [pc, #112]	@ (8000394 <tim_pa6_input_capture+0x88>)
 8000322:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000326:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1U << 13);
 8000328:	4b1a      	ldr	r3, [pc, #104]	@ (8000394 <tim_pa6_input_capture+0x88>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a19      	ldr	r2, [pc, #100]	@ (8000394 <tim_pa6_input_capture+0x88>)
 800032e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000332:	6013      	str	r3, [r2, #0]
    // set PA6 alternate function type to TIM3_CH1   (AF01)
    GPIOA->AFR[0] &= ~(0xF << 24); // Clear bits AFRL[27:24]
 8000334:	4b17      	ldr	r3, [pc, #92]	@ (8000394 <tim_pa6_input_capture+0x88>)
 8000336:	6a1b      	ldr	r3, [r3, #32]
 8000338:	4a16      	ldr	r2, [pc, #88]	@ (8000394 <tim_pa6_input_capture+0x88>)
 800033a:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800033e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (0x1 << 24);  // Set AF1
 8000340:	4b14      	ldr	r3, [pc, #80]	@ (8000394 <tim_pa6_input_capture+0x88>)
 8000342:	6a1b      	ldr	r3, [r3, #32]
 8000344:	4a13      	ldr	r2, [pc, #76]	@ (8000394 <tim_pa6_input_capture+0x88>)
 8000346:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800034a:	6213      	str	r3, [r2, #32]

    // enable clock access to tim
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800034c:	4b10      	ldr	r3, [pc, #64]	@ (8000390 <tim_pa6_input_capture+0x84>)
 800034e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000350:	4a0f      	ldr	r2, [pc, #60]	@ (8000390 <tim_pa6_input_capture+0x84>)
 8000352:	f043 0302 	orr.w	r3, r3, #2
 8000356:	6413      	str	r3, [r2, #64]	@ 0x40
    // set prescaler
    TIM3->PSC = 16000 - 1;
 8000358:	4b0f      	ldr	r3, [pc, #60]	@ (8000398 <tim_pa6_input_capture+0x8c>)
 800035a:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 800035e:	629a      	str	r2, [r3, #40]	@ 0x28
    // set CH1 to input mode
    TIM3->CCMR1 &= ~TIM_CCMR1_CC1S;        // Clear bits
 8000360:	4b0d      	ldr	r3, [pc, #52]	@ (8000398 <tim_pa6_input_capture+0x8c>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	4a0c      	ldr	r2, [pc, #48]	@ (8000398 <tim_pa6_input_capture+0x8c>)
 8000366:	f023 0303 	bic.w	r3, r3, #3
 800036a:	6193      	str	r3, [r2, #24]
    TIM3->CCMR1 |=  TIM_CCMR1_CC1S_0;      // Set CC1S = 01
 800036c:	4b0a      	ldr	r3, [pc, #40]	@ (8000398 <tim_pa6_input_capture+0x8c>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	4a09      	ldr	r2, [pc, #36]	@ (8000398 <tim_pa6_input_capture+0x8c>)
 8000372:	f043 0301 	orr.w	r3, r3, #1
 8000376:	6193      	str	r3, [r2, #24]
    // set CH1 to capture at rising edge
    TIM3->CCER = TIM_CCER_CC1E;
 8000378:	4b07      	ldr	r3, [pc, #28]	@ (8000398 <tim_pa6_input_capture+0x8c>)
 800037a:	2201      	movs	r2, #1
 800037c:	621a      	str	r2, [r3, #32]
    // enable TIM3
    TIM3->CR1 = TIM_CR1_CEN;
 800037e:	4b06      	ldr	r3, [pc, #24]	@ (8000398 <tim_pa6_input_capture+0x8c>)
 8000380:	2201      	movs	r2, #1
 8000382:	601a      	str	r2, [r3, #0]
}
 8000384:	bf00      	nop
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	40023800 	.word	0x40023800
 8000394:	40020000 	.word	0x40020000
 8000398:	40000400 	.word	0x40000400

0800039c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800039c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80003d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80003a0:	f7ff ff60 	bl	8000264 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003a4:	480c      	ldr	r0, [pc, #48]	@ (80003d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80003a6:	490d      	ldr	r1, [pc, #52]	@ (80003dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80003a8:	4a0d      	ldr	r2, [pc, #52]	@ (80003e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80003aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003ac:	e002      	b.n	80003b4 <LoopCopyDataInit>

080003ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003b2:	3304      	adds	r3, #4

080003b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003b8:	d3f9      	bcc.n	80003ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ba:	4a0a      	ldr	r2, [pc, #40]	@ (80003e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80003bc:	4c0a      	ldr	r4, [pc, #40]	@ (80003e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80003be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003c0:	e001      	b.n	80003c6 <LoopFillZerobss>

080003c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003c4:	3204      	adds	r2, #4

080003c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003c8:	d3fb      	bcc.n	80003c2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80003ca:	f000 f825 	bl	8000418 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003ce:	f7ff ff01 	bl	80001d4 <main>
  bx  lr    
 80003d2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80003d4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80003d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003dc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003e0:	08000480 	.word	0x08000480
  ldr r2, =_sbss
 80003e4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003e8:	20000028 	.word	0x20000028

080003ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003ec:	e7fe      	b.n	80003ec <ADC_IRQHandler>
	...

080003f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003f4:	4b06      	ldr	r3, [pc, #24]	@ (8000410 <HAL_IncTick+0x20>)
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	461a      	mov	r2, r3
 80003fa:	4b06      	ldr	r3, [pc, #24]	@ (8000414 <HAL_IncTick+0x24>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	4413      	add	r3, r2
 8000400:	4a04      	ldr	r2, [pc, #16]	@ (8000414 <HAL_IncTick+0x24>)
 8000402:	6013      	str	r3, [r2, #0]
}
 8000404:	bf00      	nop
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	20000000 	.word	0x20000000
 8000414:	20000024 	.word	0x20000024

08000418 <__libc_init_array>:
 8000418:	b570      	push	{r4, r5, r6, lr}
 800041a:	4d0d      	ldr	r5, [pc, #52]	@ (8000450 <__libc_init_array+0x38>)
 800041c:	4c0d      	ldr	r4, [pc, #52]	@ (8000454 <__libc_init_array+0x3c>)
 800041e:	1b64      	subs	r4, r4, r5
 8000420:	10a4      	asrs	r4, r4, #2
 8000422:	2600      	movs	r6, #0
 8000424:	42a6      	cmp	r6, r4
 8000426:	d109      	bne.n	800043c <__libc_init_array+0x24>
 8000428:	4d0b      	ldr	r5, [pc, #44]	@ (8000458 <__libc_init_array+0x40>)
 800042a:	4c0c      	ldr	r4, [pc, #48]	@ (800045c <__libc_init_array+0x44>)
 800042c:	f000 f818 	bl	8000460 <_init>
 8000430:	1b64      	subs	r4, r4, r5
 8000432:	10a4      	asrs	r4, r4, #2
 8000434:	2600      	movs	r6, #0
 8000436:	42a6      	cmp	r6, r4
 8000438:	d105      	bne.n	8000446 <__libc_init_array+0x2e>
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000440:	4798      	blx	r3
 8000442:	3601      	adds	r6, #1
 8000444:	e7ee      	b.n	8000424 <__libc_init_array+0xc>
 8000446:	f855 3b04 	ldr.w	r3, [r5], #4
 800044a:	4798      	blx	r3
 800044c:	3601      	adds	r6, #1
 800044e:	e7f2      	b.n	8000436 <__libc_init_array+0x1e>
 8000450:	08000478 	.word	0x08000478
 8000454:	08000478 	.word	0x08000478
 8000458:	08000478 	.word	0x08000478
 800045c:	0800047c 	.word	0x0800047c

08000460 <_init>:
 8000460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000462:	bf00      	nop
 8000464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000466:	bc08      	pop	{r3}
 8000468:	469e      	mov	lr, r3
 800046a:	4770      	bx	lr

0800046c <_fini>:
 800046c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046e:	bf00      	nop
 8000470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000472:	bc08      	pop	{r3}
 8000474:	469e      	mov	lr, r3
 8000476:	4770      	bx	lr
