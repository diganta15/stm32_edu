
led_toggle_addr_struct.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000210  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003a4  080003a4  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003a4  080003a4  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080003a4  080003a4  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080003a4  080003a4  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003a4  080003a4  000013a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003a8  080003a8  000013a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080003ac  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080003b0  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080003b0  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000123f  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004cd  00000000  00000000  00003273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c0  00000000  00000000  00003740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000138  00000000  00000000  00003900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e07a  00000000  00000000  00003a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001b98  00000000  00000000  00011ab2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e0b0  00000000  00000000  0001364a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000916fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000528  00000000  00000000  00091740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00091c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800038c 	.word	0x0800038c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	0800038c 	.word	0x0800038c

080001d4 <main>:
#include "stm32f401xe.h"  // Device header from CMSIS


int main(void) {
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
    // 1. Enable clock to GPIOA (bit 0 in AHB1ENR)
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80001da:	4b17      	ldr	r3, [pc, #92]	@ (8000238 <main+0x64>)
 80001dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001de:	4a16      	ldr	r2, [pc, #88]	@ (8000238 <main+0x64>)
 80001e0:	f043 0301 	orr.w	r3, r3, #1
 80001e4:	6313      	str	r3, [r2, #48]	@ 0x30

    // 2. Set PA5 to general purpose output mode (MODER = 01 for pin 5)
    GPIOA->MODER |=(1U<<10);   //set bit 10 to 1
 80001e6:	4b15      	ldr	r3, [pc, #84]	@ (800023c <main+0x68>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	4a14      	ldr	r2, [pc, #80]	@ (800023c <main+0x68>)
 80001ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80001f0:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &=~(1U<<11);    //set bit 11 to 0
 80001f2:	4b12      	ldr	r3, [pc, #72]	@ (800023c <main+0x68>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a11      	ldr	r2, [pc, #68]	@ (800023c <main+0x68>)
 80001f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80001fc:	6013      	str	r3, [r2, #0]

    GPIOA->OTYPER &= ~(1U << 5);
 80001fe:	4b0f      	ldr	r3, [pc, #60]	@ (800023c <main+0x68>)
 8000200:	685b      	ldr	r3, [r3, #4]
 8000202:	4a0e      	ldr	r2, [pc, #56]	@ (800023c <main+0x68>)
 8000204:	f023 0320 	bic.w	r3, r3, #32
 8000208:	6053      	str	r3, [r2, #4]
      GPIOA->PUPDR  &= ~(3U << (2 * 5));
 800020a:	4b0c      	ldr	r3, [pc, #48]	@ (800023c <main+0x68>)
 800020c:	68db      	ldr	r3, [r3, #12]
 800020e:	4a0b      	ldr	r2, [pc, #44]	@ (800023c <main+0x68>)
 8000210:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000214:	60d3      	str	r3, [r2, #12]
   
    // 4. Toggle PA5 in a loop
    while (1) {
        GPIOA->ODR ^= (1U << 5);  // Toggle pin 5
 8000216:	4b09      	ldr	r3, [pc, #36]	@ (800023c <main+0x68>)
 8000218:	695b      	ldr	r3, [r3, #20]
 800021a:	4a08      	ldr	r2, [pc, #32]	@ (800023c <main+0x68>)
 800021c:	f083 0320 	eor.w	r3, r3, #32
 8000220:	6153      	str	r3, [r2, #20]
        for (int i=0;i<1000000;i++){}
 8000222:	2300      	movs	r3, #0
 8000224:	607b      	str	r3, [r7, #4]
 8000226:	e002      	b.n	800022e <main+0x5a>
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	3301      	adds	r3, #1
 800022c:	607b      	str	r3, [r7, #4]
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	4a03      	ldr	r2, [pc, #12]	@ (8000240 <main+0x6c>)
 8000232:	4293      	cmp	r3, r2
 8000234:	ddf8      	ble.n	8000228 <main+0x54>
        GPIOA->ODR ^= (1U << 5);  // Toggle pin 5
 8000236:	e7ee      	b.n	8000216 <main+0x42>
 8000238:	40023800 	.word	0x40023800
 800023c:	40020000 	.word	0x40020000
 8000240:	000f423f 	.word	0x000f423f

08000244 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000248:	bf00      	nop
 800024a:	e7fd      	b.n	8000248 <NMI_Handler+0x4>

0800024c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800024c:	b480      	push	{r7}
 800024e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000250:	bf00      	nop
 8000252:	e7fd      	b.n	8000250 <HardFault_Handler+0x4>

08000254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000258:	bf00      	nop
 800025a:	e7fd      	b.n	8000258 <MemManage_Handler+0x4>

0800025c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000260:	bf00      	nop
 8000262:	e7fd      	b.n	8000260 <BusFault_Handler+0x4>

08000264 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000268:	bf00      	nop
 800026a:	e7fd      	b.n	8000268 <UsageFault_Handler+0x4>

0800026c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000270:	bf00      	nop
 8000272:	46bd      	mov	sp, r7
 8000274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000278:	4770      	bx	lr

0800027a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800027a:	b480      	push	{r7}
 800027c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800027e:	bf00      	nop
 8000280:	46bd      	mov	sp, r7
 8000282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000286:	4770      	bx	lr

08000288 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800028c:	bf00      	nop
 800028e:	46bd      	mov	sp, r7
 8000290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000294:	4770      	bx	lr

08000296 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000296:	b580      	push	{r7, lr}
 8000298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800029a:	f000 f83f 	bl	800031c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800029e:	bf00      	nop
 80002a0:	bd80      	pop	{r7, pc}
	...

080002a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002a8:	4b06      	ldr	r3, [pc, #24]	@ (80002c4 <SystemInit+0x20>)
 80002aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002ae:	4a05      	ldr	r2, [pc, #20]	@ (80002c4 <SystemInit+0x20>)
 80002b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002b8:	bf00      	nop
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	e000ed00 	.word	0xe000ed00

080002c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80002c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000300 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80002cc:	f7ff ffea 	bl	80002a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80002d0:	480c      	ldr	r0, [pc, #48]	@ (8000304 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80002d2:	490d      	ldr	r1, [pc, #52]	@ (8000308 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80002d4:	4a0d      	ldr	r2, [pc, #52]	@ (800030c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80002d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002d8:	e002      	b.n	80002e0 <LoopCopyDataInit>

080002da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002de:	3304      	adds	r3, #4

080002e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002e4:	d3f9      	bcc.n	80002da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000310 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80002e8:	4c0a      	ldr	r4, [pc, #40]	@ (8000314 <LoopFillZerobss+0x22>)
  movs r3, #0
 80002ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002ec:	e001      	b.n	80002f2 <LoopFillZerobss>

080002ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f0:	3204      	adds	r2, #4

080002f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002f4:	d3fb      	bcc.n	80002ee <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80002f6:	f000 f825 	bl	8000344 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80002fa:	f7ff ff6b 	bl	80001d4 <main>
  bx  lr    
 80002fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000300:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000308:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800030c:	080003ac 	.word	0x080003ac
  ldr r2, =_sbss
 8000310:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000314:	20000024 	.word	0x20000024

08000318 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000318:	e7fe      	b.n	8000318 <ADC_IRQHandler>
	...

0800031c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000320:	4b06      	ldr	r3, [pc, #24]	@ (800033c <HAL_IncTick+0x20>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	461a      	mov	r2, r3
 8000326:	4b06      	ldr	r3, [pc, #24]	@ (8000340 <HAL_IncTick+0x24>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4413      	add	r3, r2
 800032c:	4a04      	ldr	r2, [pc, #16]	@ (8000340 <HAL_IncTick+0x24>)
 800032e:	6013      	str	r3, [r2, #0]
}
 8000330:	bf00      	nop
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	20000000 	.word	0x20000000
 8000340:	20000020 	.word	0x20000020

08000344 <__libc_init_array>:
 8000344:	b570      	push	{r4, r5, r6, lr}
 8000346:	4d0d      	ldr	r5, [pc, #52]	@ (800037c <__libc_init_array+0x38>)
 8000348:	4c0d      	ldr	r4, [pc, #52]	@ (8000380 <__libc_init_array+0x3c>)
 800034a:	1b64      	subs	r4, r4, r5
 800034c:	10a4      	asrs	r4, r4, #2
 800034e:	2600      	movs	r6, #0
 8000350:	42a6      	cmp	r6, r4
 8000352:	d109      	bne.n	8000368 <__libc_init_array+0x24>
 8000354:	4d0b      	ldr	r5, [pc, #44]	@ (8000384 <__libc_init_array+0x40>)
 8000356:	4c0c      	ldr	r4, [pc, #48]	@ (8000388 <__libc_init_array+0x44>)
 8000358:	f000 f818 	bl	800038c <_init>
 800035c:	1b64      	subs	r4, r4, r5
 800035e:	10a4      	asrs	r4, r4, #2
 8000360:	2600      	movs	r6, #0
 8000362:	42a6      	cmp	r6, r4
 8000364:	d105      	bne.n	8000372 <__libc_init_array+0x2e>
 8000366:	bd70      	pop	{r4, r5, r6, pc}
 8000368:	f855 3b04 	ldr.w	r3, [r5], #4
 800036c:	4798      	blx	r3
 800036e:	3601      	adds	r6, #1
 8000370:	e7ee      	b.n	8000350 <__libc_init_array+0xc>
 8000372:	f855 3b04 	ldr.w	r3, [r5], #4
 8000376:	4798      	blx	r3
 8000378:	3601      	adds	r6, #1
 800037a:	e7f2      	b.n	8000362 <__libc_init_array+0x1e>
 800037c:	080003a4 	.word	0x080003a4
 8000380:	080003a4 	.word	0x080003a4
 8000384:	080003a4 	.word	0x080003a4
 8000388:	080003a8 	.word	0x080003a8

0800038c <_init>:
 800038c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800038e:	bf00      	nop
 8000390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000392:	bc08      	pop	{r3}
 8000394:	469e      	mov	lr, r3
 8000396:	4770      	bx	lr

08000398 <_fini>:
 8000398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800039a:	bf00      	nop
 800039c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800039e:	bc08      	pop	{r3}
 80003a0:	469e      	mov	lr, r3
 80003a2:	4770      	bx	lr
