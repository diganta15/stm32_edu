
uart_rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000340  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004d4  080004d4  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004d4  080004d4  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080004d4  080004d4  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080004d4  080004d4  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004d4  080004d4  000014d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004d8  080004d8  000014d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080004dc  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  080004e0  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080004e0  00002028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000013e6  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005bb  00000000  00000000  0000341a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f8  00000000  00000000  000039d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000164  00000000  00000000  00003bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ec71  00000000  00000000  00003d34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001eb1  00000000  00000000  000129a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083852  00000000  00000000  00014856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000980a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000624  00000000  00000000  000980ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00098710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080004bc 	.word	0x080004bc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	080004bc 	.word	0x080004bc

080001d4 <main>:
    return ch;
}

char key;
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
    for (volatile int i = 0; i < 2000000; ++i)
 80001da:	2300      	movs	r3, #0
 80001dc:	607b      	str	r3, [r7, #4]
 80001de:	e002      	b.n	80001e6 <main+0x12>
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3301      	adds	r3, #1
 80001e4:	607b      	str	r3, [r7, #4]
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	4a17      	ldr	r2, [pc, #92]	@ (8000248 <main+0x74>)
 80001ea:	4293      	cmp	r3, r2
 80001ec:	ddf8      	ble.n	80001e0 <main+0xc>
        ; // Delay
    uart2_rxtx_init();
 80001ee:	f000 f833 	bl	8000258 <uart2_rxtx_init>

    // Enable clock access and  Set PA5 as output pin
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80001f2:	4b16      	ldr	r3, [pc, #88]	@ (800024c <main+0x78>)
 80001f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001f6:	4a15      	ldr	r2, [pc, #84]	@ (800024c <main+0x78>)
 80001f8:	f043 0301 	orr.w	r3, r3, #1
 80001fc:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOA->MODER |= (1U << 10); // PA5 output
 80001fe:	4b14      	ldr	r3, [pc, #80]	@ (8000250 <main+0x7c>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	4a13      	ldr	r2, [pc, #76]	@ (8000250 <main+0x7c>)
 8000204:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000208:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(1U << 11);
 800020a:	4b11      	ldr	r3, [pc, #68]	@ (8000250 <main+0x7c>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4a10      	ldr	r2, [pc, #64]	@ (8000250 <main+0x7c>)
 8000210:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000214:	6013      	str	r3, [r2, #0]

    while (1)
    {
        key = uart2_read();
 8000216:	f000 f877 	bl	8000308 <uart2_read>
 800021a:	4603      	mov	r3, r0
 800021c:	461a      	mov	r2, r3
 800021e:	4b0d      	ldr	r3, [pc, #52]	@ (8000254 <main+0x80>)
 8000220:	701a      	strb	r2, [r3, #0]
        if (key == '1')
 8000222:	4b0c      	ldr	r3, [pc, #48]	@ (8000254 <main+0x80>)
 8000224:	781b      	ldrb	r3, [r3, #0]
 8000226:	2b31      	cmp	r3, #49	@ 0x31
 8000228:	d106      	bne.n	8000238 <main+0x64>
        {
            GPIOA->ODR |= (1U << 5);
 800022a:	4b09      	ldr	r3, [pc, #36]	@ (8000250 <main+0x7c>)
 800022c:	695b      	ldr	r3, [r3, #20]
 800022e:	4a08      	ldr	r2, [pc, #32]	@ (8000250 <main+0x7c>)
 8000230:	f043 0320 	orr.w	r3, r3, #32
 8000234:	6153      	str	r3, [r2, #20]
 8000236:	e7ee      	b.n	8000216 <main+0x42>
        }
        else
        {
            GPIOA->ODR &= ~(1U << 5);
 8000238:	4b05      	ldr	r3, [pc, #20]	@ (8000250 <main+0x7c>)
 800023a:	695b      	ldr	r3, [r3, #20]
 800023c:	4a04      	ldr	r2, [pc, #16]	@ (8000250 <main+0x7c>)
 800023e:	f023 0320 	bic.w	r3, r3, #32
 8000242:	6153      	str	r3, [r2, #20]
        key = uart2_read();
 8000244:	e7e7      	b.n	8000216 <main+0x42>
 8000246:	bf00      	nop
 8000248:	001e847f 	.word	0x001e847f
 800024c:	40023800 	.word	0x40023800
 8000250:	40020000 	.word	0x40020000
 8000254:	20000020 	.word	0x20000020

08000258 <uart2_rxtx_init>:

    }
}

void uart2_rxtx_init(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800025c:	4b26      	ldr	r3, [pc, #152]	@ (80002f8 <uart2_rxtx_init+0xa0>)
 800025e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000260:	4a25      	ldr	r2, [pc, #148]	@ (80002f8 <uart2_rxtx_init+0xa0>)
 8000262:	f043 0301 	orr.w	r3, r3, #1
 8000266:	6313      	str	r3, [r2, #48]	@ 0x30

    // PA2 = USART2_TX
    GPIOA->MODER &= ~(3U << 4);
 8000268:	4b24      	ldr	r3, [pc, #144]	@ (80002fc <uart2_rxtx_init+0xa4>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a23      	ldr	r2, [pc, #140]	@ (80002fc <uart2_rxtx_init+0xa4>)
 800026e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000272:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (2U << 4);
 8000274:	4b21      	ldr	r3, [pc, #132]	@ (80002fc <uart2_rxtx_init+0xa4>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a20      	ldr	r2, [pc, #128]	@ (80002fc <uart2_rxtx_init+0xa4>)
 800027a:	f043 0320 	orr.w	r3, r3, #32
 800027e:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~(0xF << 8);
 8000280:	4b1e      	ldr	r3, [pc, #120]	@ (80002fc <uart2_rxtx_init+0xa4>)
 8000282:	6a1b      	ldr	r3, [r3, #32]
 8000284:	4a1d      	ldr	r2, [pc, #116]	@ (80002fc <uart2_rxtx_init+0xa4>)
 8000286:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800028a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (7U << 8);
 800028c:	4b1b      	ldr	r3, [pc, #108]	@ (80002fc <uart2_rxtx_init+0xa4>)
 800028e:	6a1b      	ldr	r3, [r3, #32]
 8000290:	4a1a      	ldr	r2, [pc, #104]	@ (80002fc <uart2_rxtx_init+0xa4>)
 8000292:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000296:	6213      	str	r3, [r2, #32]

    // PA3 to alternate function mode
    GPIOA->MODER &= ~(1U << 6);
 8000298:	4b18      	ldr	r3, [pc, #96]	@ (80002fc <uart2_rxtx_init+0xa4>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a17      	ldr	r2, [pc, #92]	@ (80002fc <uart2_rxtx_init+0xa4>)
 800029e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80002a2:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1U << 7);
 80002a4:	4b15      	ldr	r3, [pc, #84]	@ (80002fc <uart2_rxtx_init+0xa4>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a14      	ldr	r2, [pc, #80]	@ (80002fc <uart2_rxtx_init+0xa4>)
 80002aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80002ae:	6013      	str	r3, [r2, #0]
    // Set PA
    GPIOA->AFR[0] &= ~(0xF << 12);
 80002b0:	4b12      	ldr	r3, [pc, #72]	@ (80002fc <uart2_rxtx_init+0xa4>)
 80002b2:	6a1b      	ldr	r3, [r3, #32]
 80002b4:	4a11      	ldr	r2, [pc, #68]	@ (80002fc <uart2_rxtx_init+0xa4>)
 80002b6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80002ba:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (7U << 12);
 80002bc:	4b0f      	ldr	r3, [pc, #60]	@ (80002fc <uart2_rxtx_init+0xa4>)
 80002be:	6a1b      	ldr	r3, [r3, #32]
 80002c0:	4a0e      	ldr	r2, [pc, #56]	@ (80002fc <uart2_rxtx_init+0xa4>)
 80002c2:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 80002c6:	6213      	str	r3, [r2, #32]

    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80002c8:	4b0b      	ldr	r3, [pc, #44]	@ (80002f8 <uart2_rxtx_init+0xa0>)
 80002ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002cc:	4a0a      	ldr	r2, [pc, #40]	@ (80002f8 <uart2_rxtx_init+0xa0>)
 80002ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002d2:	6413      	str	r3, [r2, #64]	@ 0x40
    uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 80002d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002d8:	4909      	ldr	r1, [pc, #36]	@ (8000300 <uart2_rxtx_init+0xa8>)
 80002da:	480a      	ldr	r0, [pc, #40]	@ (8000304 <uart2_rxtx_init+0xac>)
 80002dc:	f000 f828 	bl	8000330 <uart_set_baudrate>

    // configure transfer direction
    USART2->CR1 = USART_CR1_TE | USART_CR1_RE;
 80002e0:	4b08      	ldr	r3, [pc, #32]	@ (8000304 <uart2_rxtx_init+0xac>)
 80002e2:	220c      	movs	r2, #12
 80002e4:	60da      	str	r2, [r3, #12]
    // enable uart module
    USART2->CR1 |= USART_CR1_UE;
 80002e6:	4b07      	ldr	r3, [pc, #28]	@ (8000304 <uart2_rxtx_init+0xac>)
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	4a06      	ldr	r2, [pc, #24]	@ (8000304 <uart2_rxtx_init+0xac>)
 80002ec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002f0:	60d3      	str	r3, [r2, #12]
}
 80002f2:	bf00      	nop
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	40023800 	.word	0x40023800
 80002fc:	40020000 	.word	0x40020000
 8000300:	00f42400 	.word	0x00f42400
 8000304:	40004400 	.word	0x40004400

08000308 <uart2_read>:

char uart2_read(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0

    while (!(USART2->SR & USART_SR_RXNE))
 800030c:	bf00      	nop
 800030e:	4b07      	ldr	r3, [pc, #28]	@ (800032c <uart2_read+0x24>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	f003 0320 	and.w	r3, r3, #32
 8000316:	2b00      	cmp	r3, #0
 8000318:	d0f9      	beq.n	800030e <uart2_read+0x6>
    {

    }
    return USART2->DR;
 800031a:	4b04      	ldr	r3, [pc, #16]	@ (800032c <uart2_read+0x24>)
 800031c:	685b      	ldr	r3, [r3, #4]
 800031e:	b2db      	uxtb	r3, r3
}
 8000320:	4618      	mov	r0, r3
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	40004400 	.word	0x40004400

08000330 <uart_set_baudrate>:
        uart2_write(*str++);
    }
}

void uart_set_baudrate(USART_TypeDef *USART, uint32_t PeriphClk, uint32_t BaudRate)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af00      	add	r7, sp, #0
 8000336:	60f8      	str	r0, [r7, #12]
 8000338:	60b9      	str	r1, [r7, #8]
 800033a:	607a      	str	r2, [r7, #4]
    USART->BRR = compute_uart_div(PeriphClk, BaudRate);
 800033c:	6879      	ldr	r1, [r7, #4]
 800033e:	68b8      	ldr	r0, [r7, #8]
 8000340:	f000 f807 	bl	8000352 <compute_uart_div>
 8000344:	4602      	mov	r2, r0
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	609a      	str	r2, [r3, #8]
}
 800034a:	bf00      	nop
 800034c:	3710      	adds	r7, #16
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}

08000352 <compute_uart_div>:

uint32_t compute_uart_div(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000352:	b480      	push	{r7}
 8000354:	b083      	sub	sp, #12
 8000356:	af00      	add	r7, sp, #0
 8000358:	6078      	str	r0, [r7, #4]
 800035a:	6039      	str	r1, [r7, #0]
    return ((PeriphClk + (BaudRate / 2U)) / BaudRate);
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	085a      	lsrs	r2, r3, #1
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	441a      	add	r2, r3
 8000364:	683b      	ldr	r3, [r7, #0]
 8000366:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800036a:	4618      	mov	r0, r3
 800036c:	370c      	adds	r7, #12
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr

08000376 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000376:	b480      	push	{r7}
 8000378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800037a:	bf00      	nop
 800037c:	e7fd      	b.n	800037a <NMI_Handler+0x4>

0800037e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800037e:	b480      	push	{r7}
 8000380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000382:	bf00      	nop
 8000384:	e7fd      	b.n	8000382 <HardFault_Handler+0x4>

08000386 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000386:	b480      	push	{r7}
 8000388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800038a:	bf00      	nop
 800038c:	e7fd      	b.n	800038a <MemManage_Handler+0x4>

0800038e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800038e:	b480      	push	{r7}
 8000390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000392:	bf00      	nop
 8000394:	e7fd      	b.n	8000392 <BusFault_Handler+0x4>

08000396 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000396:	b480      	push	{r7}
 8000398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800039a:	bf00      	nop
 800039c:	e7fd      	b.n	800039a <UsageFault_Handler+0x4>

0800039e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800039e:	b480      	push	{r7}
 80003a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003a2:	bf00      	nop
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr

080003ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003b0:	bf00      	nop
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr

080003ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003ba:	b480      	push	{r7}
 80003bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003be:	bf00      	nop
 80003c0:	46bd      	mov	sp, r7
 80003c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c6:	4770      	bx	lr

080003c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003cc:	f000 f83e 	bl	800044c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003d0:	bf00      	nop
 80003d2:	bd80      	pop	{r7, pc}

080003d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003d8:	4b06      	ldr	r3, [pc, #24]	@ (80003f4 <SystemInit+0x20>)
 80003da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003de:	4a05      	ldr	r2, [pc, #20]	@ (80003f4 <SystemInit+0x20>)
 80003e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003e8:	bf00      	nop
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	e000ed00 	.word	0xe000ed00

080003f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80003f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000430 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80003fc:	f7ff ffea 	bl	80003d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000400:	480c      	ldr	r0, [pc, #48]	@ (8000434 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000402:	490d      	ldr	r1, [pc, #52]	@ (8000438 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000404:	4a0d      	ldr	r2, [pc, #52]	@ (800043c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000408:	e002      	b.n	8000410 <LoopCopyDataInit>

0800040a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800040a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800040c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800040e:	3304      	adds	r3, #4

08000410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000414:	d3f9      	bcc.n	800040a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000416:	4a0a      	ldr	r2, [pc, #40]	@ (8000440 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000418:	4c0a      	ldr	r4, [pc, #40]	@ (8000444 <LoopFillZerobss+0x22>)
  movs r3, #0
 800041a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800041c:	e001      	b.n	8000422 <LoopFillZerobss>

0800041e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800041e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000420:	3204      	adds	r2, #4

08000422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000424:	d3fb      	bcc.n	800041e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000426:	f000 f825 	bl	8000474 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800042a:	f7ff fed3 	bl	80001d4 <main>
  bx  lr    
 800042e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000430:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000434:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000438:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800043c:	080004dc 	.word	0x080004dc
  ldr r2, =_sbss
 8000440:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000444:	20000028 	.word	0x20000028

08000448 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000448:	e7fe      	b.n	8000448 <ADC_IRQHandler>
	...

0800044c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000450:	4b06      	ldr	r3, [pc, #24]	@ (800046c <HAL_IncTick+0x20>)
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	461a      	mov	r2, r3
 8000456:	4b06      	ldr	r3, [pc, #24]	@ (8000470 <HAL_IncTick+0x24>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4413      	add	r3, r2
 800045c:	4a04      	ldr	r2, [pc, #16]	@ (8000470 <HAL_IncTick+0x24>)
 800045e:	6013      	str	r3, [r2, #0]
}
 8000460:	bf00      	nop
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	20000000 	.word	0x20000000
 8000470:	20000024 	.word	0x20000024

08000474 <__libc_init_array>:
 8000474:	b570      	push	{r4, r5, r6, lr}
 8000476:	4d0d      	ldr	r5, [pc, #52]	@ (80004ac <__libc_init_array+0x38>)
 8000478:	4c0d      	ldr	r4, [pc, #52]	@ (80004b0 <__libc_init_array+0x3c>)
 800047a:	1b64      	subs	r4, r4, r5
 800047c:	10a4      	asrs	r4, r4, #2
 800047e:	2600      	movs	r6, #0
 8000480:	42a6      	cmp	r6, r4
 8000482:	d109      	bne.n	8000498 <__libc_init_array+0x24>
 8000484:	4d0b      	ldr	r5, [pc, #44]	@ (80004b4 <__libc_init_array+0x40>)
 8000486:	4c0c      	ldr	r4, [pc, #48]	@ (80004b8 <__libc_init_array+0x44>)
 8000488:	f000 f818 	bl	80004bc <_init>
 800048c:	1b64      	subs	r4, r4, r5
 800048e:	10a4      	asrs	r4, r4, #2
 8000490:	2600      	movs	r6, #0
 8000492:	42a6      	cmp	r6, r4
 8000494:	d105      	bne.n	80004a2 <__libc_init_array+0x2e>
 8000496:	bd70      	pop	{r4, r5, r6, pc}
 8000498:	f855 3b04 	ldr.w	r3, [r5], #4
 800049c:	4798      	blx	r3
 800049e:	3601      	adds	r6, #1
 80004a0:	e7ee      	b.n	8000480 <__libc_init_array+0xc>
 80004a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80004a6:	4798      	blx	r3
 80004a8:	3601      	adds	r6, #1
 80004aa:	e7f2      	b.n	8000492 <__libc_init_array+0x1e>
 80004ac:	080004d4 	.word	0x080004d4
 80004b0:	080004d4 	.word	0x080004d4
 80004b4:	080004d4 	.word	0x080004d4
 80004b8:	080004d8 	.word	0x080004d8

080004bc <_init>:
 80004bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004be:	bf00      	nop
 80004c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004c2:	bc08      	pop	{r3}
 80004c4:	469e      	mov	lr, r3
 80004c6:	4770      	bx	lr

080004c8 <_fini>:
 80004c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ca:	bf00      	nop
 80004cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ce:	bc08      	pop	{r3}
 80004d0:	469e      	mov	lr, r3
 80004d2:	4770      	bx	lr
