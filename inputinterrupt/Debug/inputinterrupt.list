
inputinterrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013f4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08001594  08001594  00002594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015d8  080015d8  00003060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080015d8  080015d8  000025d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080015e0  080015e0  00003060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015e0  080015e0  000025e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080015e4  080015e4  000025e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080015e8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000060  08001648  00003060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08001648  000031d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000267d  00000000  00000000  00003090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ae9  00000000  00000000  0000570d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000308  00000000  00000000  000061f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000021b  00000000  00000000  00006500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fb61  00000000  00000000  0000671b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003297  00000000  00000000  0001627c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085a1f  00000000  00000000  00019513  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009ef32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001124  00000000  00000000  0009ef78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000a009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800157c 	.word	0x0800157c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	0800157c 	.word	0x0800157c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	2b00      	cmp	r3, #0
 8000290:	db0b      	blt.n	80002aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	f003 021f 	and.w	r2, r3, #31
 8000298:	4907      	ldr	r1, [pc, #28]	@ (80002b8 <__NVIC_EnableIRQ+0x38>)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	095b      	lsrs	r3, r3, #5
 80002a0:	2001      	movs	r0, #1
 80002a2:	fa00 f202 	lsl.w	r2, r0, r2
 80002a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e000e100 	.word	0xe000e100

080002bc <pc13_exti_init>:
 *  Created on: Jun 26, 2025
 *      Author: digantadas
 */
#include "exti.h"

void pc13_exti_init(void){
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002c0:	b672      	cpsid	i
}
 80002c2:	bf00      	nop
    //disable global interrupts
    __disable_irq();
    //enable clock access for gpioc
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 80002c4:	4b17      	ldr	r3, [pc, #92]	@ (8000324 <pc13_exti_init+0x68>)
 80002c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002c8:	4a16      	ldr	r2, [pc, #88]	@ (8000324 <pc13_exti_init+0x68>)
 80002ca:	f043 0304 	orr.w	r3, r3, #4
 80002ce:	6313      	str	r3, [r2, #48]	@ 0x30

    //set PC13 as input
    GPIOC->MODER &=~(1U<<26);
 80002d0:	4b15      	ldr	r3, [pc, #84]	@ (8000328 <pc13_exti_init+0x6c>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a14      	ldr	r2, [pc, #80]	@ (8000328 <pc13_exti_init+0x6c>)
 80002d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80002da:	6013      	str	r3, [r2, #0]
    GPIOC->MODER &=~(1U<<27);
 80002dc:	4b12      	ldr	r3, [pc, #72]	@ (8000328 <pc13_exti_init+0x6c>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a11      	ldr	r2, [pc, #68]	@ (8000328 <pc13_exti_init+0x6c>)
 80002e2:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80002e6:	6013      	str	r3, [r2, #0]

    //enable clock access to SYSCFG
    RCC->APB2ENR = RCC_APB2ENR_SYSCFGEN;
 80002e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000324 <pc13_exti_init+0x68>)
 80002ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80002ee:	645a      	str	r2, [r3, #68]	@ 0x44
    //select PORTC for EXTI13
    SYSCFG->EXTICR[3] |=(1U<<5);
 80002f0:	4b0e      	ldr	r3, [pc, #56]	@ (800032c <pc13_exti_init+0x70>)
 80002f2:	695b      	ldr	r3, [r3, #20]
 80002f4:	4a0d      	ldr	r2, [pc, #52]	@ (800032c <pc13_exti_init+0x70>)
 80002f6:	f043 0320 	orr.w	r3, r3, #32
 80002fa:	6153      	str	r3, [r2, #20]
    //unmask EXTI13
    EXTI->IMR |=(1U<<13);
 80002fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000330 <pc13_exti_init+0x74>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a0b      	ldr	r2, [pc, #44]	@ (8000330 <pc13_exti_init+0x74>)
 8000302:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000306:	6013      	str	r3, [r2, #0]
    //select falling edge trigger
    EXTI->FTSR |=(1U<<13);
 8000308:	4b09      	ldr	r3, [pc, #36]	@ (8000330 <pc13_exti_init+0x74>)
 800030a:	68db      	ldr	r3, [r3, #12]
 800030c:	4a08      	ldr	r2, [pc, #32]	@ (8000330 <pc13_exti_init+0x74>)
 800030e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000312:	60d3      	str	r3, [r2, #12]
    //enable exti13 line in NVIC
    NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000314:	2028      	movs	r0, #40	@ 0x28
 8000316:	f7ff ffb3 	bl	8000280 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800031a:	b662      	cpsie	i
}
 800031c:	bf00      	nop

    //enable global interrupt
    __enable_irq();
}
 800031e:	bf00      	nop
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	40023800 	.word	0x40023800
 8000328:	40020800 	.word	0x40020800
 800032c:	40013800 	.word	0x40013800
 8000330:	40013c00 	.word	0x40013c00

08000334 <__io_putchar>:
#include "exti.h"
#include "uart.h"
static void exti_callback(void);

int __io_putchar(int ch) {
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
    uart2_write(ch);  // Your UART function
 800033c:	6878      	ldr	r0, [r7, #4]
 800033e:	f000 f96d 	bl	800061c <uart2_write>
    return ch;
 8000342:	687b      	ldr	r3, [r7, #4]
}
 8000344:	4618      	mov	r0, r3
 8000346:	3708      	adds	r7, #8
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}

0800034c <main>:

int main(void){
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000350:	4b0b      	ldr	r3, [pc, #44]	@ (8000380 <main+0x34>)
 8000352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000354:	4a0a      	ldr	r2, [pc, #40]	@ (8000380 <main+0x34>)
 8000356:	f043 0301 	orr.w	r3, r3, #1
 800035a:	6313      	str	r3, [r2, #48]	@ 0x30

  GPIOA->MODER |=(1U<<10);
 800035c:	4b09      	ldr	r3, [pc, #36]	@ (8000384 <main+0x38>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a08      	ldr	r2, [pc, #32]	@ (8000384 <main+0x38>)
 8000362:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000366:	6013      	str	r3, [r2, #0]
  GPIOA->MODER &=~(1U<<11);
 8000368:	4b06      	ldr	r3, [pc, #24]	@ (8000384 <main+0x38>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a05      	ldr	r2, [pc, #20]	@ (8000384 <main+0x38>)
 800036e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000372:	6013      	str	r3, [r2, #0]

  

  pc13_exti_init();
 8000374:	f7ff ffa2 	bl	80002bc <pc13_exti_init>
  uart2_tx_init();
 8000378:	f000 f910 	bl	800059c <uart2_tx_init>

  while(1){
 800037c:	bf00      	nop
 800037e:	e7fd      	b.n	800037c <main+0x30>
 8000380:	40023800 	.word	0x40023800
 8000384:	40020000 	.word	0x40020000

08000388 <exti_callback>:

  }
}

static void exti_callback(void){
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
  printf("BTN Pressed...\n\r");
 800038c:	4805      	ldr	r0, [pc, #20]	@ (80003a4 <exti_callback+0x1c>)
 800038e:	f000 fa89 	bl	80008a4 <iprintf>
  GPIOA->ODR ^= (1U<<5);
 8000392:	4b05      	ldr	r3, [pc, #20]	@ (80003a8 <exti_callback+0x20>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	4a04      	ldr	r2, [pc, #16]	@ (80003a8 <exti_callback+0x20>)
 8000398:	f083 0320 	eor.w	r3, r3, #32
 800039c:	6153      	str	r3, [r2, #20]
}
 800039e:	bf00      	nop
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	08001594 	.word	0x08001594
 80003a8:	40020000 	.word	0x40020000

080003ac <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
	 if((EXTI->PR & (1U << 13)) != 0){
 80003b0:	4b07      	ldr	r3, [pc, #28]	@ (80003d0 <EXTI15_10_IRQHandler+0x24>)
 80003b2:	695b      	ldr	r3, [r3, #20]
 80003b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d007      	beq.n	80003cc <EXTI15_10_IRQHandler+0x20>
    EXTI->PR |= (1U<<13);
 80003bc:	4b04      	ldr	r3, [pc, #16]	@ (80003d0 <EXTI15_10_IRQHandler+0x24>)
 80003be:	695b      	ldr	r3, [r3, #20]
 80003c0:	4a03      	ldr	r2, [pc, #12]	@ (80003d0 <EXTI15_10_IRQHandler+0x24>)
 80003c2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80003c6:	6153      	str	r3, [r2, #20]

    exti_callback();
 80003c8:	f7ff ffde 	bl	8000388 <exti_callback>
  }
}
 80003cc:	bf00      	nop
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	40013c00 	.word	0x40013c00

080003d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003d8:	bf00      	nop
 80003da:	e7fd      	b.n	80003d8 <NMI_Handler+0x4>

080003dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003e0:	bf00      	nop
 80003e2:	e7fd      	b.n	80003e0 <HardFault_Handler+0x4>

080003e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003e8:	bf00      	nop
 80003ea:	e7fd      	b.n	80003e8 <MemManage_Handler+0x4>

080003ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003f0:	bf00      	nop
 80003f2:	e7fd      	b.n	80003f0 <BusFault_Handler+0x4>

080003f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003f8:	bf00      	nop
 80003fa:	e7fd      	b.n	80003f8 <UsageFault_Handler+0x4>

080003fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000400:	bf00      	nop
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr

0800040a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800040a:	b480      	push	{r7}
 800040c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800040e:	bf00      	nop
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr

08000418 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800041c:	bf00      	nop
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr

08000426 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000426:	b580      	push	{r7, lr}
 8000428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800042a:	f000 f965 	bl	80006f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800042e:	bf00      	nop
 8000430:	bd80      	pop	{r7, pc}

08000432 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000432:	b580      	push	{r7, lr}
 8000434:	b086      	sub	sp, #24
 8000436:	af00      	add	r7, sp, #0
 8000438:	60f8      	str	r0, [r7, #12]
 800043a:	60b9      	str	r1, [r7, #8]
 800043c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800043e:	2300      	movs	r3, #0
 8000440:	617b      	str	r3, [r7, #20]
 8000442:	e00a      	b.n	800045a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000444:	f3af 8000 	nop.w
 8000448:	4601      	mov	r1, r0
 800044a:	68bb      	ldr	r3, [r7, #8]
 800044c:	1c5a      	adds	r2, r3, #1
 800044e:	60ba      	str	r2, [r7, #8]
 8000450:	b2ca      	uxtb	r2, r1
 8000452:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000454:	697b      	ldr	r3, [r7, #20]
 8000456:	3301      	adds	r3, #1
 8000458:	617b      	str	r3, [r7, #20]
 800045a:	697a      	ldr	r2, [r7, #20]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	429a      	cmp	r2, r3
 8000460:	dbf0      	blt.n	8000444 <_read+0x12>
  }

  return len;
 8000462:	687b      	ldr	r3, [r7, #4]
}
 8000464:	4618      	mov	r0, r3
 8000466:	3718      	adds	r7, #24
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}

0800046c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b086      	sub	sp, #24
 8000470:	af00      	add	r7, sp, #0
 8000472:	60f8      	str	r0, [r7, #12]
 8000474:	60b9      	str	r1, [r7, #8]
 8000476:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000478:	2300      	movs	r3, #0
 800047a:	617b      	str	r3, [r7, #20]
 800047c:	e009      	b.n	8000492 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800047e:	68bb      	ldr	r3, [r7, #8]
 8000480:	1c5a      	adds	r2, r3, #1
 8000482:	60ba      	str	r2, [r7, #8]
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	4618      	mov	r0, r3
 8000488:	f7ff ff54 	bl	8000334 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800048c:	697b      	ldr	r3, [r7, #20]
 800048e:	3301      	adds	r3, #1
 8000490:	617b      	str	r3, [r7, #20]
 8000492:	697a      	ldr	r2, [r7, #20]
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	429a      	cmp	r2, r3
 8000498:	dbf1      	blt.n	800047e <_write+0x12>
  }
  return len;
 800049a:	687b      	ldr	r3, [r7, #4]
}
 800049c:	4618      	mov	r0, r3
 800049e:	3718      	adds	r7, #24
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}

080004a4 <_close>:

int _close(int file)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b083      	sub	sp, #12
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80004ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80004b0:	4618      	mov	r0, r3
 80004b2:	370c      	adds	r7, #12
 80004b4:	46bd      	mov	sp, r7
 80004b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ba:	4770      	bx	lr

080004bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
 80004c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80004cc:	605a      	str	r2, [r3, #4]
  return 0;
 80004ce:	2300      	movs	r3, #0
}
 80004d0:	4618      	mov	r0, r3
 80004d2:	370c      	adds	r7, #12
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr

080004dc <_isatty>:

int _isatty(int file)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80004e4:	2301      	movs	r3, #1
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	370c      	adds	r7, #12
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr

080004f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004f2:	b480      	push	{r7}
 80004f4:	b085      	sub	sp, #20
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	60f8      	str	r0, [r7, #12]
 80004fa:	60b9      	str	r1, [r7, #8]
 80004fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80004fe:	2300      	movs	r3, #0
}
 8000500:	4618      	mov	r0, r3
 8000502:	3714      	adds	r7, #20
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr

0800050c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b086      	sub	sp, #24
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000514:	4a14      	ldr	r2, [pc, #80]	@ (8000568 <_sbrk+0x5c>)
 8000516:	4b15      	ldr	r3, [pc, #84]	@ (800056c <_sbrk+0x60>)
 8000518:	1ad3      	subs	r3, r2, r3
 800051a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800051c:	697b      	ldr	r3, [r7, #20]
 800051e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000520:	4b13      	ldr	r3, [pc, #76]	@ (8000570 <_sbrk+0x64>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d102      	bne.n	800052e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000528:	4b11      	ldr	r3, [pc, #68]	@ (8000570 <_sbrk+0x64>)
 800052a:	4a12      	ldr	r2, [pc, #72]	@ (8000574 <_sbrk+0x68>)
 800052c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800052e:	4b10      	ldr	r3, [pc, #64]	@ (8000570 <_sbrk+0x64>)
 8000530:	681a      	ldr	r2, [r3, #0]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4413      	add	r3, r2
 8000536:	693a      	ldr	r2, [r7, #16]
 8000538:	429a      	cmp	r2, r3
 800053a:	d207      	bcs.n	800054c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800053c:	f000 fa56 	bl	80009ec <__errno>
 8000540:	4603      	mov	r3, r0
 8000542:	220c      	movs	r2, #12
 8000544:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000546:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800054a:	e009      	b.n	8000560 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800054c:	4b08      	ldr	r3, [pc, #32]	@ (8000570 <_sbrk+0x64>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000552:	4b07      	ldr	r3, [pc, #28]	@ (8000570 <_sbrk+0x64>)
 8000554:	681a      	ldr	r2, [r3, #0]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4413      	add	r3, r2
 800055a:	4a05      	ldr	r2, [pc, #20]	@ (8000570 <_sbrk+0x64>)
 800055c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800055e:	68fb      	ldr	r3, [r7, #12]
}
 8000560:	4618      	mov	r0, r3
 8000562:	3718      	adds	r7, #24
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20018000 	.word	0x20018000
 800056c:	00000400 	.word	0x00000400
 8000570:	2000007c 	.word	0x2000007c
 8000574:	200001d0 	.word	0x200001d0

08000578 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800057c:	4b06      	ldr	r3, [pc, #24]	@ (8000598 <SystemInit+0x20>)
 800057e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000582:	4a05      	ldr	r2, [pc, #20]	@ (8000598 <SystemInit+0x20>)
 8000584:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000588:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	e000ed00 	.word	0xe000ed00

0800059c <uart2_tx_init>:
 */

#include "uart.h"

void uart2_tx_init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80005a0:	4b1a      	ldr	r3, [pc, #104]	@ (800060c <uart2_tx_init+0x70>)
 80005a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a4:	4a19      	ldr	r2, [pc, #100]	@ (800060c <uart2_tx_init+0x70>)
 80005a6:	f043 0301 	orr.w	r3, r3, #1
 80005aa:	6313      	str	r3, [r2, #48]	@ 0x30

    // PA2 = USART2_TX
    GPIOA->MODER &= ~(3U << 4);
 80005ac:	4b18      	ldr	r3, [pc, #96]	@ (8000610 <uart2_tx_init+0x74>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a17      	ldr	r2, [pc, #92]	@ (8000610 <uart2_tx_init+0x74>)
 80005b2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80005b6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (2U << 4);
 80005b8:	4b15      	ldr	r3, [pc, #84]	@ (8000610 <uart2_tx_init+0x74>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a14      	ldr	r2, [pc, #80]	@ (8000610 <uart2_tx_init+0x74>)
 80005be:	f043 0320 	orr.w	r3, r3, #32
 80005c2:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~(0xF << 8);
 80005c4:	4b12      	ldr	r3, [pc, #72]	@ (8000610 <uart2_tx_init+0x74>)
 80005c6:	6a1b      	ldr	r3, [r3, #32]
 80005c8:	4a11      	ldr	r2, [pc, #68]	@ (8000610 <uart2_tx_init+0x74>)
 80005ca:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80005ce:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (7U << 8);
 80005d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000610 <uart2_tx_init+0x74>)
 80005d2:	6a1b      	ldr	r3, [r3, #32]
 80005d4:	4a0e      	ldr	r2, [pc, #56]	@ (8000610 <uart2_tx_init+0x74>)
 80005d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80005da:	6213      	str	r3, [r2, #32]

    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80005dc:	4b0b      	ldr	r3, [pc, #44]	@ (800060c <uart2_tx_init+0x70>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e0:	4a0a      	ldr	r2, [pc, #40]	@ (800060c <uart2_tx_init+0x70>)
 80005e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005e6:	6413      	str	r3, [r2, #64]	@ 0x40
    uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 80005e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005ec:	4909      	ldr	r1, [pc, #36]	@ (8000614 <uart2_tx_init+0x78>)
 80005ee:	480a      	ldr	r0, [pc, #40]	@ (8000618 <uart2_tx_init+0x7c>)
 80005f0:	f000 f834 	bl	800065c <uart_set_baudrate>

    USART2->CR1 = USART_CR1_TE;
 80005f4:	4b08      	ldr	r3, [pc, #32]	@ (8000618 <uart2_tx_init+0x7c>)
 80005f6:	2208      	movs	r2, #8
 80005f8:	60da      	str	r2, [r3, #12]
    USART2->CR1 |= USART_CR1_UE;
 80005fa:	4b07      	ldr	r3, [pc, #28]	@ (8000618 <uart2_tx_init+0x7c>)
 80005fc:	68db      	ldr	r3, [r3, #12]
 80005fe:	4a06      	ldr	r2, [pc, #24]	@ (8000618 <uart2_tx_init+0x7c>)
 8000600:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000604:	60d3      	str	r3, [r2, #12]
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40023800 	.word	0x40023800
 8000610:	40020000 	.word	0x40020000
 8000614:	00f42400 	.word	0x00f42400
 8000618:	40004400 	.word	0x40004400

0800061c <uart2_write>:

void uart2_write(int ch)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
    while (!(USART2->SR & USART_SR_TXE))
 8000624:	bf00      	nop
 8000626:	4b0c      	ldr	r3, [pc, #48]	@ (8000658 <uart2_write+0x3c>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800062e:	2b00      	cmp	r3, #0
 8000630:	d0f9      	beq.n	8000626 <uart2_write+0xa>
    {
    }
    USART2->DR = (ch & 0xFF);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4a08      	ldr	r2, [pc, #32]	@ (8000658 <uart2_write+0x3c>)
 8000636:	b2db      	uxtb	r3, r3
 8000638:	6053      	str	r3, [r2, #4]
    while (!(USART2->SR & USART_SR_TC))
 800063a:	bf00      	nop
 800063c:	4b06      	ldr	r3, [pc, #24]	@ (8000658 <uart2_write+0x3c>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000644:	2b00      	cmp	r3, #0
 8000646:	d0f9      	beq.n	800063c <uart2_write+0x20>
    {
    }
}
 8000648:	bf00      	nop
 800064a:	bf00      	nop
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	40004400 	.word	0x40004400

0800065c <uart_set_baudrate>:
        uart2_write(*str++);
    }
}

void uart_set_baudrate(USART_TypeDef *USART, uint32_t PeriphClk, uint32_t BaudRate)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	60b9      	str	r1, [r7, #8]
 8000666:	607a      	str	r2, [r7, #4]
    USART->BRR = compute_uart_div(PeriphClk, BaudRate);
 8000668:	6879      	ldr	r1, [r7, #4]
 800066a:	68b8      	ldr	r0, [r7, #8]
 800066c:	f000 f807 	bl	800067e <compute_uart_div>
 8000670:	4602      	mov	r2, r0
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	609a      	str	r2, [r3, #8]
}
 8000676:	bf00      	nop
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <compute_uart_div>:

uint32_t compute_uart_div(uint32_t PeriphClk, uint32_t BaudRate)
{
 800067e:	b480      	push	{r7}
 8000680:	b083      	sub	sp, #12
 8000682:	af00      	add	r7, sp, #0
 8000684:	6078      	str	r0, [r7, #4]
 8000686:	6039      	str	r1, [r7, #0]
    return ((PeriphClk + (BaudRate / 2U)) / BaudRate);
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	085a      	lsrs	r2, r3, #1
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	441a      	add	r2, r3
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000696:	4618      	mov	r0, r3
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
	...

080006a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80006a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80006a8:	f7ff ff66 	bl	8000578 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80006ac:	480c      	ldr	r0, [pc, #48]	@ (80006e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006ae:	490d      	ldr	r1, [pc, #52]	@ (80006e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006b0:	4a0d      	ldr	r2, [pc, #52]	@ (80006e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b4:	e002      	b.n	80006bc <LoopCopyDataInit>

080006b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ba:	3304      	adds	r3, #4

080006bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c0:	d3f9      	bcc.n	80006b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006c2:	4a0a      	ldr	r2, [pc, #40]	@ (80006ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006c4:	4c0a      	ldr	r4, [pc, #40]	@ (80006f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80006c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c8:	e001      	b.n	80006ce <LoopFillZerobss>

080006ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006cc:	3204      	adds	r2, #4

080006ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d0:	d3fb      	bcc.n	80006ca <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80006d2:	f000 f991 	bl	80009f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006d6:	f7ff fe39 	bl	800034c <main>
  bx  lr    
 80006da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80006dc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80006e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80006e8:	080015e8 	.word	0x080015e8
  ldr r2, =_sbss
 80006ec:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80006f0:	200001d0 	.word	0x200001d0

080006f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006f4:	e7fe      	b.n	80006f4 <ADC_IRQHandler>
	...

080006f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006fc:	4b06      	ldr	r3, [pc, #24]	@ (8000718 <HAL_IncTick+0x20>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	461a      	mov	r2, r3
 8000702:	4b06      	ldr	r3, [pc, #24]	@ (800071c <HAL_IncTick+0x24>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4413      	add	r3, r2
 8000708:	4a04      	ldr	r2, [pc, #16]	@ (800071c <HAL_IncTick+0x24>)
 800070a:	6013      	str	r3, [r2, #0]
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	20000000 	.word	0x20000000
 800071c:	20000080 	.word	0x20000080

08000720 <std>:
 8000720:	2300      	movs	r3, #0
 8000722:	b510      	push	{r4, lr}
 8000724:	4604      	mov	r4, r0
 8000726:	e9c0 3300 	strd	r3, r3, [r0]
 800072a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800072e:	6083      	str	r3, [r0, #8]
 8000730:	8181      	strh	r1, [r0, #12]
 8000732:	6643      	str	r3, [r0, #100]	@ 0x64
 8000734:	81c2      	strh	r2, [r0, #14]
 8000736:	6183      	str	r3, [r0, #24]
 8000738:	4619      	mov	r1, r3
 800073a:	2208      	movs	r2, #8
 800073c:	305c      	adds	r0, #92	@ 0x5c
 800073e:	f000 f906 	bl	800094e <memset>
 8000742:	4b0d      	ldr	r3, [pc, #52]	@ (8000778 <std+0x58>)
 8000744:	6263      	str	r3, [r4, #36]	@ 0x24
 8000746:	4b0d      	ldr	r3, [pc, #52]	@ (800077c <std+0x5c>)
 8000748:	62a3      	str	r3, [r4, #40]	@ 0x28
 800074a:	4b0d      	ldr	r3, [pc, #52]	@ (8000780 <std+0x60>)
 800074c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800074e:	4b0d      	ldr	r3, [pc, #52]	@ (8000784 <std+0x64>)
 8000750:	6323      	str	r3, [r4, #48]	@ 0x30
 8000752:	4b0d      	ldr	r3, [pc, #52]	@ (8000788 <std+0x68>)
 8000754:	6224      	str	r4, [r4, #32]
 8000756:	429c      	cmp	r4, r3
 8000758:	d006      	beq.n	8000768 <std+0x48>
 800075a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800075e:	4294      	cmp	r4, r2
 8000760:	d002      	beq.n	8000768 <std+0x48>
 8000762:	33d0      	adds	r3, #208	@ 0xd0
 8000764:	429c      	cmp	r4, r3
 8000766:	d105      	bne.n	8000774 <std+0x54>
 8000768:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800076c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000770:	f000 b966 	b.w	8000a40 <__retarget_lock_init_recursive>
 8000774:	bd10      	pop	{r4, pc}
 8000776:	bf00      	nop
 8000778:	080008c9 	.word	0x080008c9
 800077c:	080008eb 	.word	0x080008eb
 8000780:	08000923 	.word	0x08000923
 8000784:	08000947 	.word	0x08000947
 8000788:	20000084 	.word	0x20000084

0800078c <stdio_exit_handler>:
 800078c:	4a02      	ldr	r2, [pc, #8]	@ (8000798 <stdio_exit_handler+0xc>)
 800078e:	4903      	ldr	r1, [pc, #12]	@ (800079c <stdio_exit_handler+0x10>)
 8000790:	4803      	ldr	r0, [pc, #12]	@ (80007a0 <stdio_exit_handler+0x14>)
 8000792:	f000 b869 	b.w	8000868 <_fwalk_sglue>
 8000796:	bf00      	nop
 8000798:	20000004 	.word	0x20000004
 800079c:	080012dd 	.word	0x080012dd
 80007a0:	20000014 	.word	0x20000014

080007a4 <cleanup_stdio>:
 80007a4:	6841      	ldr	r1, [r0, #4]
 80007a6:	4b0c      	ldr	r3, [pc, #48]	@ (80007d8 <cleanup_stdio+0x34>)
 80007a8:	4299      	cmp	r1, r3
 80007aa:	b510      	push	{r4, lr}
 80007ac:	4604      	mov	r4, r0
 80007ae:	d001      	beq.n	80007b4 <cleanup_stdio+0x10>
 80007b0:	f000 fd94 	bl	80012dc <_fflush_r>
 80007b4:	68a1      	ldr	r1, [r4, #8]
 80007b6:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <cleanup_stdio+0x38>)
 80007b8:	4299      	cmp	r1, r3
 80007ba:	d002      	beq.n	80007c2 <cleanup_stdio+0x1e>
 80007bc:	4620      	mov	r0, r4
 80007be:	f000 fd8d 	bl	80012dc <_fflush_r>
 80007c2:	68e1      	ldr	r1, [r4, #12]
 80007c4:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <cleanup_stdio+0x3c>)
 80007c6:	4299      	cmp	r1, r3
 80007c8:	d004      	beq.n	80007d4 <cleanup_stdio+0x30>
 80007ca:	4620      	mov	r0, r4
 80007cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007d0:	f000 bd84 	b.w	80012dc <_fflush_r>
 80007d4:	bd10      	pop	{r4, pc}
 80007d6:	bf00      	nop
 80007d8:	20000084 	.word	0x20000084
 80007dc:	200000ec 	.word	0x200000ec
 80007e0:	20000154 	.word	0x20000154

080007e4 <global_stdio_init.part.0>:
 80007e4:	b510      	push	{r4, lr}
 80007e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000814 <global_stdio_init.part.0+0x30>)
 80007e8:	4c0b      	ldr	r4, [pc, #44]	@ (8000818 <global_stdio_init.part.0+0x34>)
 80007ea:	4a0c      	ldr	r2, [pc, #48]	@ (800081c <global_stdio_init.part.0+0x38>)
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	4620      	mov	r0, r4
 80007f0:	2200      	movs	r2, #0
 80007f2:	2104      	movs	r1, #4
 80007f4:	f7ff ff94 	bl	8000720 <std>
 80007f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80007fc:	2201      	movs	r2, #1
 80007fe:	2109      	movs	r1, #9
 8000800:	f7ff ff8e 	bl	8000720 <std>
 8000804:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000808:	2202      	movs	r2, #2
 800080a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800080e:	2112      	movs	r1, #18
 8000810:	f7ff bf86 	b.w	8000720 <std>
 8000814:	200001bc 	.word	0x200001bc
 8000818:	20000084 	.word	0x20000084
 800081c:	0800078d 	.word	0x0800078d

08000820 <__sfp_lock_acquire>:
 8000820:	4801      	ldr	r0, [pc, #4]	@ (8000828 <__sfp_lock_acquire+0x8>)
 8000822:	f000 b90e 	b.w	8000a42 <__retarget_lock_acquire_recursive>
 8000826:	bf00      	nop
 8000828:	200001c5 	.word	0x200001c5

0800082c <__sfp_lock_release>:
 800082c:	4801      	ldr	r0, [pc, #4]	@ (8000834 <__sfp_lock_release+0x8>)
 800082e:	f000 b909 	b.w	8000a44 <__retarget_lock_release_recursive>
 8000832:	bf00      	nop
 8000834:	200001c5 	.word	0x200001c5

08000838 <__sinit>:
 8000838:	b510      	push	{r4, lr}
 800083a:	4604      	mov	r4, r0
 800083c:	f7ff fff0 	bl	8000820 <__sfp_lock_acquire>
 8000840:	6a23      	ldr	r3, [r4, #32]
 8000842:	b11b      	cbz	r3, 800084c <__sinit+0x14>
 8000844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000848:	f7ff bff0 	b.w	800082c <__sfp_lock_release>
 800084c:	4b04      	ldr	r3, [pc, #16]	@ (8000860 <__sinit+0x28>)
 800084e:	6223      	str	r3, [r4, #32]
 8000850:	4b04      	ldr	r3, [pc, #16]	@ (8000864 <__sinit+0x2c>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d1f5      	bne.n	8000844 <__sinit+0xc>
 8000858:	f7ff ffc4 	bl	80007e4 <global_stdio_init.part.0>
 800085c:	e7f2      	b.n	8000844 <__sinit+0xc>
 800085e:	bf00      	nop
 8000860:	080007a5 	.word	0x080007a5
 8000864:	200001bc 	.word	0x200001bc

08000868 <_fwalk_sglue>:
 8000868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800086c:	4607      	mov	r7, r0
 800086e:	4688      	mov	r8, r1
 8000870:	4614      	mov	r4, r2
 8000872:	2600      	movs	r6, #0
 8000874:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000878:	f1b9 0901 	subs.w	r9, r9, #1
 800087c:	d505      	bpl.n	800088a <_fwalk_sglue+0x22>
 800087e:	6824      	ldr	r4, [r4, #0]
 8000880:	2c00      	cmp	r4, #0
 8000882:	d1f7      	bne.n	8000874 <_fwalk_sglue+0xc>
 8000884:	4630      	mov	r0, r6
 8000886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800088a:	89ab      	ldrh	r3, [r5, #12]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d907      	bls.n	80008a0 <_fwalk_sglue+0x38>
 8000890:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000894:	3301      	adds	r3, #1
 8000896:	d003      	beq.n	80008a0 <_fwalk_sglue+0x38>
 8000898:	4629      	mov	r1, r5
 800089a:	4638      	mov	r0, r7
 800089c:	47c0      	blx	r8
 800089e:	4306      	orrs	r6, r0
 80008a0:	3568      	adds	r5, #104	@ 0x68
 80008a2:	e7e9      	b.n	8000878 <_fwalk_sglue+0x10>

080008a4 <iprintf>:
 80008a4:	b40f      	push	{r0, r1, r2, r3}
 80008a6:	b507      	push	{r0, r1, r2, lr}
 80008a8:	4906      	ldr	r1, [pc, #24]	@ (80008c4 <iprintf+0x20>)
 80008aa:	ab04      	add	r3, sp, #16
 80008ac:	6808      	ldr	r0, [r1, #0]
 80008ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80008b2:	6881      	ldr	r1, [r0, #8]
 80008b4:	9301      	str	r3, [sp, #4]
 80008b6:	f000 f9e9 	bl	8000c8c <_vfiprintf_r>
 80008ba:	b003      	add	sp, #12
 80008bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80008c0:	b004      	add	sp, #16
 80008c2:	4770      	bx	lr
 80008c4:	20000010 	.word	0x20000010

080008c8 <__sread>:
 80008c8:	b510      	push	{r4, lr}
 80008ca:	460c      	mov	r4, r1
 80008cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008d0:	f000 f868 	bl	80009a4 <_read_r>
 80008d4:	2800      	cmp	r0, #0
 80008d6:	bfab      	itete	ge
 80008d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80008da:	89a3      	ldrhlt	r3, [r4, #12]
 80008dc:	181b      	addge	r3, r3, r0
 80008de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80008e2:	bfac      	ite	ge
 80008e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80008e6:	81a3      	strhlt	r3, [r4, #12]
 80008e8:	bd10      	pop	{r4, pc}

080008ea <__swrite>:
 80008ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008ee:	461f      	mov	r7, r3
 80008f0:	898b      	ldrh	r3, [r1, #12]
 80008f2:	05db      	lsls	r3, r3, #23
 80008f4:	4605      	mov	r5, r0
 80008f6:	460c      	mov	r4, r1
 80008f8:	4616      	mov	r6, r2
 80008fa:	d505      	bpl.n	8000908 <__swrite+0x1e>
 80008fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000900:	2302      	movs	r3, #2
 8000902:	2200      	movs	r2, #0
 8000904:	f000 f83c 	bl	8000980 <_lseek_r>
 8000908:	89a3      	ldrh	r3, [r4, #12]
 800090a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800090e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000912:	81a3      	strh	r3, [r4, #12]
 8000914:	4632      	mov	r2, r6
 8000916:	463b      	mov	r3, r7
 8000918:	4628      	mov	r0, r5
 800091a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800091e:	f000 b853 	b.w	80009c8 <_write_r>

08000922 <__sseek>:
 8000922:	b510      	push	{r4, lr}
 8000924:	460c      	mov	r4, r1
 8000926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800092a:	f000 f829 	bl	8000980 <_lseek_r>
 800092e:	1c43      	adds	r3, r0, #1
 8000930:	89a3      	ldrh	r3, [r4, #12]
 8000932:	bf15      	itete	ne
 8000934:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000936:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800093a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800093e:	81a3      	strheq	r3, [r4, #12]
 8000940:	bf18      	it	ne
 8000942:	81a3      	strhne	r3, [r4, #12]
 8000944:	bd10      	pop	{r4, pc}

08000946 <__sclose>:
 8000946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800094a:	f000 b809 	b.w	8000960 <_close_r>

0800094e <memset>:
 800094e:	4402      	add	r2, r0
 8000950:	4603      	mov	r3, r0
 8000952:	4293      	cmp	r3, r2
 8000954:	d100      	bne.n	8000958 <memset+0xa>
 8000956:	4770      	bx	lr
 8000958:	f803 1b01 	strb.w	r1, [r3], #1
 800095c:	e7f9      	b.n	8000952 <memset+0x4>
	...

08000960 <_close_r>:
 8000960:	b538      	push	{r3, r4, r5, lr}
 8000962:	4d06      	ldr	r5, [pc, #24]	@ (800097c <_close_r+0x1c>)
 8000964:	2300      	movs	r3, #0
 8000966:	4604      	mov	r4, r0
 8000968:	4608      	mov	r0, r1
 800096a:	602b      	str	r3, [r5, #0]
 800096c:	f7ff fd9a 	bl	80004a4 <_close>
 8000970:	1c43      	adds	r3, r0, #1
 8000972:	d102      	bne.n	800097a <_close_r+0x1a>
 8000974:	682b      	ldr	r3, [r5, #0]
 8000976:	b103      	cbz	r3, 800097a <_close_r+0x1a>
 8000978:	6023      	str	r3, [r4, #0]
 800097a:	bd38      	pop	{r3, r4, r5, pc}
 800097c:	200001c0 	.word	0x200001c0

08000980 <_lseek_r>:
 8000980:	b538      	push	{r3, r4, r5, lr}
 8000982:	4d07      	ldr	r5, [pc, #28]	@ (80009a0 <_lseek_r+0x20>)
 8000984:	4604      	mov	r4, r0
 8000986:	4608      	mov	r0, r1
 8000988:	4611      	mov	r1, r2
 800098a:	2200      	movs	r2, #0
 800098c:	602a      	str	r2, [r5, #0]
 800098e:	461a      	mov	r2, r3
 8000990:	f7ff fdaf 	bl	80004f2 <_lseek>
 8000994:	1c43      	adds	r3, r0, #1
 8000996:	d102      	bne.n	800099e <_lseek_r+0x1e>
 8000998:	682b      	ldr	r3, [r5, #0]
 800099a:	b103      	cbz	r3, 800099e <_lseek_r+0x1e>
 800099c:	6023      	str	r3, [r4, #0]
 800099e:	bd38      	pop	{r3, r4, r5, pc}
 80009a0:	200001c0 	.word	0x200001c0

080009a4 <_read_r>:
 80009a4:	b538      	push	{r3, r4, r5, lr}
 80009a6:	4d07      	ldr	r5, [pc, #28]	@ (80009c4 <_read_r+0x20>)
 80009a8:	4604      	mov	r4, r0
 80009aa:	4608      	mov	r0, r1
 80009ac:	4611      	mov	r1, r2
 80009ae:	2200      	movs	r2, #0
 80009b0:	602a      	str	r2, [r5, #0]
 80009b2:	461a      	mov	r2, r3
 80009b4:	f7ff fd3d 	bl	8000432 <_read>
 80009b8:	1c43      	adds	r3, r0, #1
 80009ba:	d102      	bne.n	80009c2 <_read_r+0x1e>
 80009bc:	682b      	ldr	r3, [r5, #0]
 80009be:	b103      	cbz	r3, 80009c2 <_read_r+0x1e>
 80009c0:	6023      	str	r3, [r4, #0]
 80009c2:	bd38      	pop	{r3, r4, r5, pc}
 80009c4:	200001c0 	.word	0x200001c0

080009c8 <_write_r>:
 80009c8:	b538      	push	{r3, r4, r5, lr}
 80009ca:	4d07      	ldr	r5, [pc, #28]	@ (80009e8 <_write_r+0x20>)
 80009cc:	4604      	mov	r4, r0
 80009ce:	4608      	mov	r0, r1
 80009d0:	4611      	mov	r1, r2
 80009d2:	2200      	movs	r2, #0
 80009d4:	602a      	str	r2, [r5, #0]
 80009d6:	461a      	mov	r2, r3
 80009d8:	f7ff fd48 	bl	800046c <_write>
 80009dc:	1c43      	adds	r3, r0, #1
 80009de:	d102      	bne.n	80009e6 <_write_r+0x1e>
 80009e0:	682b      	ldr	r3, [r5, #0]
 80009e2:	b103      	cbz	r3, 80009e6 <_write_r+0x1e>
 80009e4:	6023      	str	r3, [r4, #0]
 80009e6:	bd38      	pop	{r3, r4, r5, pc}
 80009e8:	200001c0 	.word	0x200001c0

080009ec <__errno>:
 80009ec:	4b01      	ldr	r3, [pc, #4]	@ (80009f4 <__errno+0x8>)
 80009ee:	6818      	ldr	r0, [r3, #0]
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	20000010 	.word	0x20000010

080009f8 <__libc_init_array>:
 80009f8:	b570      	push	{r4, r5, r6, lr}
 80009fa:	4d0d      	ldr	r5, [pc, #52]	@ (8000a30 <__libc_init_array+0x38>)
 80009fc:	4c0d      	ldr	r4, [pc, #52]	@ (8000a34 <__libc_init_array+0x3c>)
 80009fe:	1b64      	subs	r4, r4, r5
 8000a00:	10a4      	asrs	r4, r4, #2
 8000a02:	2600      	movs	r6, #0
 8000a04:	42a6      	cmp	r6, r4
 8000a06:	d109      	bne.n	8000a1c <__libc_init_array+0x24>
 8000a08:	4d0b      	ldr	r5, [pc, #44]	@ (8000a38 <__libc_init_array+0x40>)
 8000a0a:	4c0c      	ldr	r4, [pc, #48]	@ (8000a3c <__libc_init_array+0x44>)
 8000a0c:	f000 fdb6 	bl	800157c <_init>
 8000a10:	1b64      	subs	r4, r4, r5
 8000a12:	10a4      	asrs	r4, r4, #2
 8000a14:	2600      	movs	r6, #0
 8000a16:	42a6      	cmp	r6, r4
 8000a18:	d105      	bne.n	8000a26 <__libc_init_array+0x2e>
 8000a1a:	bd70      	pop	{r4, r5, r6, pc}
 8000a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a20:	4798      	blx	r3
 8000a22:	3601      	adds	r6, #1
 8000a24:	e7ee      	b.n	8000a04 <__libc_init_array+0xc>
 8000a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a2a:	4798      	blx	r3
 8000a2c:	3601      	adds	r6, #1
 8000a2e:	e7f2      	b.n	8000a16 <__libc_init_array+0x1e>
 8000a30:	080015e0 	.word	0x080015e0
 8000a34:	080015e0 	.word	0x080015e0
 8000a38:	080015e0 	.word	0x080015e0
 8000a3c:	080015e4 	.word	0x080015e4

08000a40 <__retarget_lock_init_recursive>:
 8000a40:	4770      	bx	lr

08000a42 <__retarget_lock_acquire_recursive>:
 8000a42:	4770      	bx	lr

08000a44 <__retarget_lock_release_recursive>:
 8000a44:	4770      	bx	lr
	...

08000a48 <_free_r>:
 8000a48:	b538      	push	{r3, r4, r5, lr}
 8000a4a:	4605      	mov	r5, r0
 8000a4c:	2900      	cmp	r1, #0
 8000a4e:	d041      	beq.n	8000ad4 <_free_r+0x8c>
 8000a50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000a54:	1f0c      	subs	r4, r1, #4
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	bfb8      	it	lt
 8000a5a:	18e4      	addlt	r4, r4, r3
 8000a5c:	f000 f8e0 	bl	8000c20 <__malloc_lock>
 8000a60:	4a1d      	ldr	r2, [pc, #116]	@ (8000ad8 <_free_r+0x90>)
 8000a62:	6813      	ldr	r3, [r2, #0]
 8000a64:	b933      	cbnz	r3, 8000a74 <_free_r+0x2c>
 8000a66:	6063      	str	r3, [r4, #4]
 8000a68:	6014      	str	r4, [r2, #0]
 8000a6a:	4628      	mov	r0, r5
 8000a6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a70:	f000 b8dc 	b.w	8000c2c <__malloc_unlock>
 8000a74:	42a3      	cmp	r3, r4
 8000a76:	d908      	bls.n	8000a8a <_free_r+0x42>
 8000a78:	6820      	ldr	r0, [r4, #0]
 8000a7a:	1821      	adds	r1, r4, r0
 8000a7c:	428b      	cmp	r3, r1
 8000a7e:	bf01      	itttt	eq
 8000a80:	6819      	ldreq	r1, [r3, #0]
 8000a82:	685b      	ldreq	r3, [r3, #4]
 8000a84:	1809      	addeq	r1, r1, r0
 8000a86:	6021      	streq	r1, [r4, #0]
 8000a88:	e7ed      	b.n	8000a66 <_free_r+0x1e>
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	b10b      	cbz	r3, 8000a94 <_free_r+0x4c>
 8000a90:	42a3      	cmp	r3, r4
 8000a92:	d9fa      	bls.n	8000a8a <_free_r+0x42>
 8000a94:	6811      	ldr	r1, [r2, #0]
 8000a96:	1850      	adds	r0, r2, r1
 8000a98:	42a0      	cmp	r0, r4
 8000a9a:	d10b      	bne.n	8000ab4 <_free_r+0x6c>
 8000a9c:	6820      	ldr	r0, [r4, #0]
 8000a9e:	4401      	add	r1, r0
 8000aa0:	1850      	adds	r0, r2, r1
 8000aa2:	4283      	cmp	r3, r0
 8000aa4:	6011      	str	r1, [r2, #0]
 8000aa6:	d1e0      	bne.n	8000a6a <_free_r+0x22>
 8000aa8:	6818      	ldr	r0, [r3, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	6053      	str	r3, [r2, #4]
 8000aae:	4408      	add	r0, r1
 8000ab0:	6010      	str	r0, [r2, #0]
 8000ab2:	e7da      	b.n	8000a6a <_free_r+0x22>
 8000ab4:	d902      	bls.n	8000abc <_free_r+0x74>
 8000ab6:	230c      	movs	r3, #12
 8000ab8:	602b      	str	r3, [r5, #0]
 8000aba:	e7d6      	b.n	8000a6a <_free_r+0x22>
 8000abc:	6820      	ldr	r0, [r4, #0]
 8000abe:	1821      	adds	r1, r4, r0
 8000ac0:	428b      	cmp	r3, r1
 8000ac2:	bf04      	itt	eq
 8000ac4:	6819      	ldreq	r1, [r3, #0]
 8000ac6:	685b      	ldreq	r3, [r3, #4]
 8000ac8:	6063      	str	r3, [r4, #4]
 8000aca:	bf04      	itt	eq
 8000acc:	1809      	addeq	r1, r1, r0
 8000ace:	6021      	streq	r1, [r4, #0]
 8000ad0:	6054      	str	r4, [r2, #4]
 8000ad2:	e7ca      	b.n	8000a6a <_free_r+0x22>
 8000ad4:	bd38      	pop	{r3, r4, r5, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200001cc 	.word	0x200001cc

08000adc <sbrk_aligned>:
 8000adc:	b570      	push	{r4, r5, r6, lr}
 8000ade:	4e0f      	ldr	r6, [pc, #60]	@ (8000b1c <sbrk_aligned+0x40>)
 8000ae0:	460c      	mov	r4, r1
 8000ae2:	6831      	ldr	r1, [r6, #0]
 8000ae4:	4605      	mov	r5, r0
 8000ae6:	b911      	cbnz	r1, 8000aee <sbrk_aligned+0x12>
 8000ae8:	f000 fcb4 	bl	8001454 <_sbrk_r>
 8000aec:	6030      	str	r0, [r6, #0]
 8000aee:	4621      	mov	r1, r4
 8000af0:	4628      	mov	r0, r5
 8000af2:	f000 fcaf 	bl	8001454 <_sbrk_r>
 8000af6:	1c43      	adds	r3, r0, #1
 8000af8:	d103      	bne.n	8000b02 <sbrk_aligned+0x26>
 8000afa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000afe:	4620      	mov	r0, r4
 8000b00:	bd70      	pop	{r4, r5, r6, pc}
 8000b02:	1cc4      	adds	r4, r0, #3
 8000b04:	f024 0403 	bic.w	r4, r4, #3
 8000b08:	42a0      	cmp	r0, r4
 8000b0a:	d0f8      	beq.n	8000afe <sbrk_aligned+0x22>
 8000b0c:	1a21      	subs	r1, r4, r0
 8000b0e:	4628      	mov	r0, r5
 8000b10:	f000 fca0 	bl	8001454 <_sbrk_r>
 8000b14:	3001      	adds	r0, #1
 8000b16:	d1f2      	bne.n	8000afe <sbrk_aligned+0x22>
 8000b18:	e7ef      	b.n	8000afa <sbrk_aligned+0x1e>
 8000b1a:	bf00      	nop
 8000b1c:	200001c8 	.word	0x200001c8

08000b20 <_malloc_r>:
 8000b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b24:	1ccd      	adds	r5, r1, #3
 8000b26:	f025 0503 	bic.w	r5, r5, #3
 8000b2a:	3508      	adds	r5, #8
 8000b2c:	2d0c      	cmp	r5, #12
 8000b2e:	bf38      	it	cc
 8000b30:	250c      	movcc	r5, #12
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	4606      	mov	r6, r0
 8000b36:	db01      	blt.n	8000b3c <_malloc_r+0x1c>
 8000b38:	42a9      	cmp	r1, r5
 8000b3a:	d904      	bls.n	8000b46 <_malloc_r+0x26>
 8000b3c:	230c      	movs	r3, #12
 8000b3e:	6033      	str	r3, [r6, #0]
 8000b40:	2000      	movs	r0, #0
 8000b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000c1c <_malloc_r+0xfc>
 8000b4a:	f000 f869 	bl	8000c20 <__malloc_lock>
 8000b4e:	f8d8 3000 	ldr.w	r3, [r8]
 8000b52:	461c      	mov	r4, r3
 8000b54:	bb44      	cbnz	r4, 8000ba8 <_malloc_r+0x88>
 8000b56:	4629      	mov	r1, r5
 8000b58:	4630      	mov	r0, r6
 8000b5a:	f7ff ffbf 	bl	8000adc <sbrk_aligned>
 8000b5e:	1c43      	adds	r3, r0, #1
 8000b60:	4604      	mov	r4, r0
 8000b62:	d158      	bne.n	8000c16 <_malloc_r+0xf6>
 8000b64:	f8d8 4000 	ldr.w	r4, [r8]
 8000b68:	4627      	mov	r7, r4
 8000b6a:	2f00      	cmp	r7, #0
 8000b6c:	d143      	bne.n	8000bf6 <_malloc_r+0xd6>
 8000b6e:	2c00      	cmp	r4, #0
 8000b70:	d04b      	beq.n	8000c0a <_malloc_r+0xea>
 8000b72:	6823      	ldr	r3, [r4, #0]
 8000b74:	4639      	mov	r1, r7
 8000b76:	4630      	mov	r0, r6
 8000b78:	eb04 0903 	add.w	r9, r4, r3
 8000b7c:	f000 fc6a 	bl	8001454 <_sbrk_r>
 8000b80:	4581      	cmp	r9, r0
 8000b82:	d142      	bne.n	8000c0a <_malloc_r+0xea>
 8000b84:	6821      	ldr	r1, [r4, #0]
 8000b86:	1a6d      	subs	r5, r5, r1
 8000b88:	4629      	mov	r1, r5
 8000b8a:	4630      	mov	r0, r6
 8000b8c:	f7ff ffa6 	bl	8000adc <sbrk_aligned>
 8000b90:	3001      	adds	r0, #1
 8000b92:	d03a      	beq.n	8000c0a <_malloc_r+0xea>
 8000b94:	6823      	ldr	r3, [r4, #0]
 8000b96:	442b      	add	r3, r5
 8000b98:	6023      	str	r3, [r4, #0]
 8000b9a:	f8d8 3000 	ldr.w	r3, [r8]
 8000b9e:	685a      	ldr	r2, [r3, #4]
 8000ba0:	bb62      	cbnz	r2, 8000bfc <_malloc_r+0xdc>
 8000ba2:	f8c8 7000 	str.w	r7, [r8]
 8000ba6:	e00f      	b.n	8000bc8 <_malloc_r+0xa8>
 8000ba8:	6822      	ldr	r2, [r4, #0]
 8000baa:	1b52      	subs	r2, r2, r5
 8000bac:	d420      	bmi.n	8000bf0 <_malloc_r+0xd0>
 8000bae:	2a0b      	cmp	r2, #11
 8000bb0:	d917      	bls.n	8000be2 <_malloc_r+0xc2>
 8000bb2:	1961      	adds	r1, r4, r5
 8000bb4:	42a3      	cmp	r3, r4
 8000bb6:	6025      	str	r5, [r4, #0]
 8000bb8:	bf18      	it	ne
 8000bba:	6059      	strne	r1, [r3, #4]
 8000bbc:	6863      	ldr	r3, [r4, #4]
 8000bbe:	bf08      	it	eq
 8000bc0:	f8c8 1000 	streq.w	r1, [r8]
 8000bc4:	5162      	str	r2, [r4, r5]
 8000bc6:	604b      	str	r3, [r1, #4]
 8000bc8:	4630      	mov	r0, r6
 8000bca:	f000 f82f 	bl	8000c2c <__malloc_unlock>
 8000bce:	f104 000b 	add.w	r0, r4, #11
 8000bd2:	1d23      	adds	r3, r4, #4
 8000bd4:	f020 0007 	bic.w	r0, r0, #7
 8000bd8:	1ac2      	subs	r2, r0, r3
 8000bda:	bf1c      	itt	ne
 8000bdc:	1a1b      	subne	r3, r3, r0
 8000bde:	50a3      	strne	r3, [r4, r2]
 8000be0:	e7af      	b.n	8000b42 <_malloc_r+0x22>
 8000be2:	6862      	ldr	r2, [r4, #4]
 8000be4:	42a3      	cmp	r3, r4
 8000be6:	bf0c      	ite	eq
 8000be8:	f8c8 2000 	streq.w	r2, [r8]
 8000bec:	605a      	strne	r2, [r3, #4]
 8000bee:	e7eb      	b.n	8000bc8 <_malloc_r+0xa8>
 8000bf0:	4623      	mov	r3, r4
 8000bf2:	6864      	ldr	r4, [r4, #4]
 8000bf4:	e7ae      	b.n	8000b54 <_malloc_r+0x34>
 8000bf6:	463c      	mov	r4, r7
 8000bf8:	687f      	ldr	r7, [r7, #4]
 8000bfa:	e7b6      	b.n	8000b6a <_malloc_r+0x4a>
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	42a3      	cmp	r3, r4
 8000c02:	d1fb      	bne.n	8000bfc <_malloc_r+0xdc>
 8000c04:	2300      	movs	r3, #0
 8000c06:	6053      	str	r3, [r2, #4]
 8000c08:	e7de      	b.n	8000bc8 <_malloc_r+0xa8>
 8000c0a:	230c      	movs	r3, #12
 8000c0c:	6033      	str	r3, [r6, #0]
 8000c0e:	4630      	mov	r0, r6
 8000c10:	f000 f80c 	bl	8000c2c <__malloc_unlock>
 8000c14:	e794      	b.n	8000b40 <_malloc_r+0x20>
 8000c16:	6005      	str	r5, [r0, #0]
 8000c18:	e7d6      	b.n	8000bc8 <_malloc_r+0xa8>
 8000c1a:	bf00      	nop
 8000c1c:	200001cc 	.word	0x200001cc

08000c20 <__malloc_lock>:
 8000c20:	4801      	ldr	r0, [pc, #4]	@ (8000c28 <__malloc_lock+0x8>)
 8000c22:	f7ff bf0e 	b.w	8000a42 <__retarget_lock_acquire_recursive>
 8000c26:	bf00      	nop
 8000c28:	200001c4 	.word	0x200001c4

08000c2c <__malloc_unlock>:
 8000c2c:	4801      	ldr	r0, [pc, #4]	@ (8000c34 <__malloc_unlock+0x8>)
 8000c2e:	f7ff bf09 	b.w	8000a44 <__retarget_lock_release_recursive>
 8000c32:	bf00      	nop
 8000c34:	200001c4 	.word	0x200001c4

08000c38 <__sfputc_r>:
 8000c38:	6893      	ldr	r3, [r2, #8]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	b410      	push	{r4}
 8000c40:	6093      	str	r3, [r2, #8]
 8000c42:	da08      	bge.n	8000c56 <__sfputc_r+0x1e>
 8000c44:	6994      	ldr	r4, [r2, #24]
 8000c46:	42a3      	cmp	r3, r4
 8000c48:	db01      	blt.n	8000c4e <__sfputc_r+0x16>
 8000c4a:	290a      	cmp	r1, #10
 8000c4c:	d103      	bne.n	8000c56 <__sfputc_r+0x1e>
 8000c4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c52:	f000 bb6b 	b.w	800132c <__swbuf_r>
 8000c56:	6813      	ldr	r3, [r2, #0]
 8000c58:	1c58      	adds	r0, r3, #1
 8000c5a:	6010      	str	r0, [r2, #0]
 8000c5c:	7019      	strb	r1, [r3, #0]
 8000c5e:	4608      	mov	r0, r1
 8000c60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <__sfputs_r>:
 8000c66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c68:	4606      	mov	r6, r0
 8000c6a:	460f      	mov	r7, r1
 8000c6c:	4614      	mov	r4, r2
 8000c6e:	18d5      	adds	r5, r2, r3
 8000c70:	42ac      	cmp	r4, r5
 8000c72:	d101      	bne.n	8000c78 <__sfputs_r+0x12>
 8000c74:	2000      	movs	r0, #0
 8000c76:	e007      	b.n	8000c88 <__sfputs_r+0x22>
 8000c78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c7c:	463a      	mov	r2, r7
 8000c7e:	4630      	mov	r0, r6
 8000c80:	f7ff ffda 	bl	8000c38 <__sfputc_r>
 8000c84:	1c43      	adds	r3, r0, #1
 8000c86:	d1f3      	bne.n	8000c70 <__sfputs_r+0xa>
 8000c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000c8c <_vfiprintf_r>:
 8000c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c90:	460d      	mov	r5, r1
 8000c92:	b09d      	sub	sp, #116	@ 0x74
 8000c94:	4614      	mov	r4, r2
 8000c96:	4698      	mov	r8, r3
 8000c98:	4606      	mov	r6, r0
 8000c9a:	b118      	cbz	r0, 8000ca4 <_vfiprintf_r+0x18>
 8000c9c:	6a03      	ldr	r3, [r0, #32]
 8000c9e:	b90b      	cbnz	r3, 8000ca4 <_vfiprintf_r+0x18>
 8000ca0:	f7ff fdca 	bl	8000838 <__sinit>
 8000ca4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000ca6:	07d9      	lsls	r1, r3, #31
 8000ca8:	d405      	bmi.n	8000cb6 <_vfiprintf_r+0x2a>
 8000caa:	89ab      	ldrh	r3, [r5, #12]
 8000cac:	059a      	lsls	r2, r3, #22
 8000cae:	d402      	bmi.n	8000cb6 <_vfiprintf_r+0x2a>
 8000cb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000cb2:	f7ff fec6 	bl	8000a42 <__retarget_lock_acquire_recursive>
 8000cb6:	89ab      	ldrh	r3, [r5, #12]
 8000cb8:	071b      	lsls	r3, r3, #28
 8000cba:	d501      	bpl.n	8000cc0 <_vfiprintf_r+0x34>
 8000cbc:	692b      	ldr	r3, [r5, #16]
 8000cbe:	b99b      	cbnz	r3, 8000ce8 <_vfiprintf_r+0x5c>
 8000cc0:	4629      	mov	r1, r5
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	f000 fb70 	bl	80013a8 <__swsetup_r>
 8000cc8:	b170      	cbz	r0, 8000ce8 <_vfiprintf_r+0x5c>
 8000cca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000ccc:	07dc      	lsls	r4, r3, #31
 8000cce:	d504      	bpl.n	8000cda <_vfiprintf_r+0x4e>
 8000cd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cd4:	b01d      	add	sp, #116	@ 0x74
 8000cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cda:	89ab      	ldrh	r3, [r5, #12]
 8000cdc:	0598      	lsls	r0, r3, #22
 8000cde:	d4f7      	bmi.n	8000cd0 <_vfiprintf_r+0x44>
 8000ce0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000ce2:	f7ff feaf 	bl	8000a44 <__retarget_lock_release_recursive>
 8000ce6:	e7f3      	b.n	8000cd0 <_vfiprintf_r+0x44>
 8000ce8:	2300      	movs	r3, #0
 8000cea:	9309      	str	r3, [sp, #36]	@ 0x24
 8000cec:	2320      	movs	r3, #32
 8000cee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000cf2:	f8cd 800c 	str.w	r8, [sp, #12]
 8000cf6:	2330      	movs	r3, #48	@ 0x30
 8000cf8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000ea8 <_vfiprintf_r+0x21c>
 8000cfc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000d00:	f04f 0901 	mov.w	r9, #1
 8000d04:	4623      	mov	r3, r4
 8000d06:	469a      	mov	sl, r3
 8000d08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d0c:	b10a      	cbz	r2, 8000d12 <_vfiprintf_r+0x86>
 8000d0e:	2a25      	cmp	r2, #37	@ 0x25
 8000d10:	d1f9      	bne.n	8000d06 <_vfiprintf_r+0x7a>
 8000d12:	ebba 0b04 	subs.w	fp, sl, r4
 8000d16:	d00b      	beq.n	8000d30 <_vfiprintf_r+0xa4>
 8000d18:	465b      	mov	r3, fp
 8000d1a:	4622      	mov	r2, r4
 8000d1c:	4629      	mov	r1, r5
 8000d1e:	4630      	mov	r0, r6
 8000d20:	f7ff ffa1 	bl	8000c66 <__sfputs_r>
 8000d24:	3001      	adds	r0, #1
 8000d26:	f000 80a7 	beq.w	8000e78 <_vfiprintf_r+0x1ec>
 8000d2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000d2c:	445a      	add	r2, fp
 8000d2e:	9209      	str	r2, [sp, #36]	@ 0x24
 8000d30:	f89a 3000 	ldrb.w	r3, [sl]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	f000 809f 	beq.w	8000e78 <_vfiprintf_r+0x1ec>
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000d44:	f10a 0a01 	add.w	sl, sl, #1
 8000d48:	9304      	str	r3, [sp, #16]
 8000d4a:	9307      	str	r3, [sp, #28]
 8000d4c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000d50:	931a      	str	r3, [sp, #104]	@ 0x68
 8000d52:	4654      	mov	r4, sl
 8000d54:	2205      	movs	r2, #5
 8000d56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d5a:	4853      	ldr	r0, [pc, #332]	@ (8000ea8 <_vfiprintf_r+0x21c>)
 8000d5c:	f7ff fa40 	bl	80001e0 <memchr>
 8000d60:	9a04      	ldr	r2, [sp, #16]
 8000d62:	b9d8      	cbnz	r0, 8000d9c <_vfiprintf_r+0x110>
 8000d64:	06d1      	lsls	r1, r2, #27
 8000d66:	bf44      	itt	mi
 8000d68:	2320      	movmi	r3, #32
 8000d6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d6e:	0713      	lsls	r3, r2, #28
 8000d70:	bf44      	itt	mi
 8000d72:	232b      	movmi	r3, #43	@ 0x2b
 8000d74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d78:	f89a 3000 	ldrb.w	r3, [sl]
 8000d7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d7e:	d015      	beq.n	8000dac <_vfiprintf_r+0x120>
 8000d80:	9a07      	ldr	r2, [sp, #28]
 8000d82:	4654      	mov	r4, sl
 8000d84:	2000      	movs	r0, #0
 8000d86:	f04f 0c0a 	mov.w	ip, #10
 8000d8a:	4621      	mov	r1, r4
 8000d8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d90:	3b30      	subs	r3, #48	@ 0x30
 8000d92:	2b09      	cmp	r3, #9
 8000d94:	d94b      	bls.n	8000e2e <_vfiprintf_r+0x1a2>
 8000d96:	b1b0      	cbz	r0, 8000dc6 <_vfiprintf_r+0x13a>
 8000d98:	9207      	str	r2, [sp, #28]
 8000d9a:	e014      	b.n	8000dc6 <_vfiprintf_r+0x13a>
 8000d9c:	eba0 0308 	sub.w	r3, r0, r8
 8000da0:	fa09 f303 	lsl.w	r3, r9, r3
 8000da4:	4313      	orrs	r3, r2
 8000da6:	9304      	str	r3, [sp, #16]
 8000da8:	46a2      	mov	sl, r4
 8000daa:	e7d2      	b.n	8000d52 <_vfiprintf_r+0xc6>
 8000dac:	9b03      	ldr	r3, [sp, #12]
 8000dae:	1d19      	adds	r1, r3, #4
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	9103      	str	r1, [sp, #12]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	bfbb      	ittet	lt
 8000db8:	425b      	neglt	r3, r3
 8000dba:	f042 0202 	orrlt.w	r2, r2, #2
 8000dbe:	9307      	strge	r3, [sp, #28]
 8000dc0:	9307      	strlt	r3, [sp, #28]
 8000dc2:	bfb8      	it	lt
 8000dc4:	9204      	strlt	r2, [sp, #16]
 8000dc6:	7823      	ldrb	r3, [r4, #0]
 8000dc8:	2b2e      	cmp	r3, #46	@ 0x2e
 8000dca:	d10a      	bne.n	8000de2 <_vfiprintf_r+0x156>
 8000dcc:	7863      	ldrb	r3, [r4, #1]
 8000dce:	2b2a      	cmp	r3, #42	@ 0x2a
 8000dd0:	d132      	bne.n	8000e38 <_vfiprintf_r+0x1ac>
 8000dd2:	9b03      	ldr	r3, [sp, #12]
 8000dd4:	1d1a      	adds	r2, r3, #4
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	9203      	str	r2, [sp, #12]
 8000dda:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000dde:	3402      	adds	r4, #2
 8000de0:	9305      	str	r3, [sp, #20]
 8000de2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000eb8 <_vfiprintf_r+0x22c>
 8000de6:	7821      	ldrb	r1, [r4, #0]
 8000de8:	2203      	movs	r2, #3
 8000dea:	4650      	mov	r0, sl
 8000dec:	f7ff f9f8 	bl	80001e0 <memchr>
 8000df0:	b138      	cbz	r0, 8000e02 <_vfiprintf_r+0x176>
 8000df2:	9b04      	ldr	r3, [sp, #16]
 8000df4:	eba0 000a 	sub.w	r0, r0, sl
 8000df8:	2240      	movs	r2, #64	@ 0x40
 8000dfa:	4082      	lsls	r2, r0
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	3401      	adds	r4, #1
 8000e00:	9304      	str	r3, [sp, #16]
 8000e02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e06:	4829      	ldr	r0, [pc, #164]	@ (8000eac <_vfiprintf_r+0x220>)
 8000e08:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000e0c:	2206      	movs	r2, #6
 8000e0e:	f7ff f9e7 	bl	80001e0 <memchr>
 8000e12:	2800      	cmp	r0, #0
 8000e14:	d03f      	beq.n	8000e96 <_vfiprintf_r+0x20a>
 8000e16:	4b26      	ldr	r3, [pc, #152]	@ (8000eb0 <_vfiprintf_r+0x224>)
 8000e18:	bb1b      	cbnz	r3, 8000e62 <_vfiprintf_r+0x1d6>
 8000e1a:	9b03      	ldr	r3, [sp, #12]
 8000e1c:	3307      	adds	r3, #7
 8000e1e:	f023 0307 	bic.w	r3, r3, #7
 8000e22:	3308      	adds	r3, #8
 8000e24:	9303      	str	r3, [sp, #12]
 8000e26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000e28:	443b      	add	r3, r7
 8000e2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8000e2c:	e76a      	b.n	8000d04 <_vfiprintf_r+0x78>
 8000e2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8000e32:	460c      	mov	r4, r1
 8000e34:	2001      	movs	r0, #1
 8000e36:	e7a8      	b.n	8000d8a <_vfiprintf_r+0xfe>
 8000e38:	2300      	movs	r3, #0
 8000e3a:	3401      	adds	r4, #1
 8000e3c:	9305      	str	r3, [sp, #20]
 8000e3e:	4619      	mov	r1, r3
 8000e40:	f04f 0c0a 	mov.w	ip, #10
 8000e44:	4620      	mov	r0, r4
 8000e46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e4a:	3a30      	subs	r2, #48	@ 0x30
 8000e4c:	2a09      	cmp	r2, #9
 8000e4e:	d903      	bls.n	8000e58 <_vfiprintf_r+0x1cc>
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d0c6      	beq.n	8000de2 <_vfiprintf_r+0x156>
 8000e54:	9105      	str	r1, [sp, #20]
 8000e56:	e7c4      	b.n	8000de2 <_vfiprintf_r+0x156>
 8000e58:	fb0c 2101 	mla	r1, ip, r1, r2
 8000e5c:	4604      	mov	r4, r0
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e7f0      	b.n	8000e44 <_vfiprintf_r+0x1b8>
 8000e62:	ab03      	add	r3, sp, #12
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	462a      	mov	r2, r5
 8000e68:	4b12      	ldr	r3, [pc, #72]	@ (8000eb4 <_vfiprintf_r+0x228>)
 8000e6a:	a904      	add	r1, sp, #16
 8000e6c:	4630      	mov	r0, r6
 8000e6e:	f3af 8000 	nop.w
 8000e72:	4607      	mov	r7, r0
 8000e74:	1c78      	adds	r0, r7, #1
 8000e76:	d1d6      	bne.n	8000e26 <_vfiprintf_r+0x19a>
 8000e78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000e7a:	07d9      	lsls	r1, r3, #31
 8000e7c:	d405      	bmi.n	8000e8a <_vfiprintf_r+0x1fe>
 8000e7e:	89ab      	ldrh	r3, [r5, #12]
 8000e80:	059a      	lsls	r2, r3, #22
 8000e82:	d402      	bmi.n	8000e8a <_vfiprintf_r+0x1fe>
 8000e84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000e86:	f7ff fddd 	bl	8000a44 <__retarget_lock_release_recursive>
 8000e8a:	89ab      	ldrh	r3, [r5, #12]
 8000e8c:	065b      	lsls	r3, r3, #25
 8000e8e:	f53f af1f 	bmi.w	8000cd0 <_vfiprintf_r+0x44>
 8000e92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000e94:	e71e      	b.n	8000cd4 <_vfiprintf_r+0x48>
 8000e96:	ab03      	add	r3, sp, #12
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	462a      	mov	r2, r5
 8000e9c:	4b05      	ldr	r3, [pc, #20]	@ (8000eb4 <_vfiprintf_r+0x228>)
 8000e9e:	a904      	add	r1, sp, #16
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	f000 f879 	bl	8000f98 <_printf_i>
 8000ea6:	e7e4      	b.n	8000e72 <_vfiprintf_r+0x1e6>
 8000ea8:	080015a5 	.word	0x080015a5
 8000eac:	080015af 	.word	0x080015af
 8000eb0:	00000000 	.word	0x00000000
 8000eb4:	08000c67 	.word	0x08000c67
 8000eb8:	080015ab 	.word	0x080015ab

08000ebc <_printf_common>:
 8000ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ec0:	4616      	mov	r6, r2
 8000ec2:	4698      	mov	r8, r3
 8000ec4:	688a      	ldr	r2, [r1, #8]
 8000ec6:	690b      	ldr	r3, [r1, #16]
 8000ec8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	bfb8      	it	lt
 8000ed0:	4613      	movlt	r3, r2
 8000ed2:	6033      	str	r3, [r6, #0]
 8000ed4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000ed8:	4607      	mov	r7, r0
 8000eda:	460c      	mov	r4, r1
 8000edc:	b10a      	cbz	r2, 8000ee2 <_printf_common+0x26>
 8000ede:	3301      	adds	r3, #1
 8000ee0:	6033      	str	r3, [r6, #0]
 8000ee2:	6823      	ldr	r3, [r4, #0]
 8000ee4:	0699      	lsls	r1, r3, #26
 8000ee6:	bf42      	ittt	mi
 8000ee8:	6833      	ldrmi	r3, [r6, #0]
 8000eea:	3302      	addmi	r3, #2
 8000eec:	6033      	strmi	r3, [r6, #0]
 8000eee:	6825      	ldr	r5, [r4, #0]
 8000ef0:	f015 0506 	ands.w	r5, r5, #6
 8000ef4:	d106      	bne.n	8000f04 <_printf_common+0x48>
 8000ef6:	f104 0a19 	add.w	sl, r4, #25
 8000efa:	68e3      	ldr	r3, [r4, #12]
 8000efc:	6832      	ldr	r2, [r6, #0]
 8000efe:	1a9b      	subs	r3, r3, r2
 8000f00:	42ab      	cmp	r3, r5
 8000f02:	dc26      	bgt.n	8000f52 <_printf_common+0x96>
 8000f04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000f08:	6822      	ldr	r2, [r4, #0]
 8000f0a:	3b00      	subs	r3, #0
 8000f0c:	bf18      	it	ne
 8000f0e:	2301      	movne	r3, #1
 8000f10:	0692      	lsls	r2, r2, #26
 8000f12:	d42b      	bmi.n	8000f6c <_printf_common+0xb0>
 8000f14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000f18:	4641      	mov	r1, r8
 8000f1a:	4638      	mov	r0, r7
 8000f1c:	47c8      	blx	r9
 8000f1e:	3001      	adds	r0, #1
 8000f20:	d01e      	beq.n	8000f60 <_printf_common+0xa4>
 8000f22:	6823      	ldr	r3, [r4, #0]
 8000f24:	6922      	ldr	r2, [r4, #16]
 8000f26:	f003 0306 	and.w	r3, r3, #6
 8000f2a:	2b04      	cmp	r3, #4
 8000f2c:	bf02      	ittt	eq
 8000f2e:	68e5      	ldreq	r5, [r4, #12]
 8000f30:	6833      	ldreq	r3, [r6, #0]
 8000f32:	1aed      	subeq	r5, r5, r3
 8000f34:	68a3      	ldr	r3, [r4, #8]
 8000f36:	bf0c      	ite	eq
 8000f38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000f3c:	2500      	movne	r5, #0
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	bfc4      	itt	gt
 8000f42:	1a9b      	subgt	r3, r3, r2
 8000f44:	18ed      	addgt	r5, r5, r3
 8000f46:	2600      	movs	r6, #0
 8000f48:	341a      	adds	r4, #26
 8000f4a:	42b5      	cmp	r5, r6
 8000f4c:	d11a      	bne.n	8000f84 <_printf_common+0xc8>
 8000f4e:	2000      	movs	r0, #0
 8000f50:	e008      	b.n	8000f64 <_printf_common+0xa8>
 8000f52:	2301      	movs	r3, #1
 8000f54:	4652      	mov	r2, sl
 8000f56:	4641      	mov	r1, r8
 8000f58:	4638      	mov	r0, r7
 8000f5a:	47c8      	blx	r9
 8000f5c:	3001      	adds	r0, #1
 8000f5e:	d103      	bne.n	8000f68 <_printf_common+0xac>
 8000f60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f68:	3501      	adds	r5, #1
 8000f6a:	e7c6      	b.n	8000efa <_printf_common+0x3e>
 8000f6c:	18e1      	adds	r1, r4, r3
 8000f6e:	1c5a      	adds	r2, r3, #1
 8000f70:	2030      	movs	r0, #48	@ 0x30
 8000f72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000f76:	4422      	add	r2, r4
 8000f78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000f7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000f80:	3302      	adds	r3, #2
 8000f82:	e7c7      	b.n	8000f14 <_printf_common+0x58>
 8000f84:	2301      	movs	r3, #1
 8000f86:	4622      	mov	r2, r4
 8000f88:	4641      	mov	r1, r8
 8000f8a:	4638      	mov	r0, r7
 8000f8c:	47c8      	blx	r9
 8000f8e:	3001      	adds	r0, #1
 8000f90:	d0e6      	beq.n	8000f60 <_printf_common+0xa4>
 8000f92:	3601      	adds	r6, #1
 8000f94:	e7d9      	b.n	8000f4a <_printf_common+0x8e>
	...

08000f98 <_printf_i>:
 8000f98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f9c:	7e0f      	ldrb	r7, [r1, #24]
 8000f9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000fa0:	2f78      	cmp	r7, #120	@ 0x78
 8000fa2:	4691      	mov	r9, r2
 8000fa4:	4680      	mov	r8, r0
 8000fa6:	460c      	mov	r4, r1
 8000fa8:	469a      	mov	sl, r3
 8000faa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000fae:	d807      	bhi.n	8000fc0 <_printf_i+0x28>
 8000fb0:	2f62      	cmp	r7, #98	@ 0x62
 8000fb2:	d80a      	bhi.n	8000fca <_printf_i+0x32>
 8000fb4:	2f00      	cmp	r7, #0
 8000fb6:	f000 80d1 	beq.w	800115c <_printf_i+0x1c4>
 8000fba:	2f58      	cmp	r7, #88	@ 0x58
 8000fbc:	f000 80b8 	beq.w	8001130 <_printf_i+0x198>
 8000fc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000fc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000fc8:	e03a      	b.n	8001040 <_printf_i+0xa8>
 8000fca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000fce:	2b15      	cmp	r3, #21
 8000fd0:	d8f6      	bhi.n	8000fc0 <_printf_i+0x28>
 8000fd2:	a101      	add	r1, pc, #4	@ (adr r1, 8000fd8 <_printf_i+0x40>)
 8000fd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000fd8:	08001031 	.word	0x08001031
 8000fdc:	08001045 	.word	0x08001045
 8000fe0:	08000fc1 	.word	0x08000fc1
 8000fe4:	08000fc1 	.word	0x08000fc1
 8000fe8:	08000fc1 	.word	0x08000fc1
 8000fec:	08000fc1 	.word	0x08000fc1
 8000ff0:	08001045 	.word	0x08001045
 8000ff4:	08000fc1 	.word	0x08000fc1
 8000ff8:	08000fc1 	.word	0x08000fc1
 8000ffc:	08000fc1 	.word	0x08000fc1
 8001000:	08000fc1 	.word	0x08000fc1
 8001004:	08001143 	.word	0x08001143
 8001008:	0800106f 	.word	0x0800106f
 800100c:	080010fd 	.word	0x080010fd
 8001010:	08000fc1 	.word	0x08000fc1
 8001014:	08000fc1 	.word	0x08000fc1
 8001018:	08001165 	.word	0x08001165
 800101c:	08000fc1 	.word	0x08000fc1
 8001020:	0800106f 	.word	0x0800106f
 8001024:	08000fc1 	.word	0x08000fc1
 8001028:	08000fc1 	.word	0x08000fc1
 800102c:	08001105 	.word	0x08001105
 8001030:	6833      	ldr	r3, [r6, #0]
 8001032:	1d1a      	adds	r2, r3, #4
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	6032      	str	r2, [r6, #0]
 8001038:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800103c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001040:	2301      	movs	r3, #1
 8001042:	e09c      	b.n	800117e <_printf_i+0x1e6>
 8001044:	6833      	ldr	r3, [r6, #0]
 8001046:	6820      	ldr	r0, [r4, #0]
 8001048:	1d19      	adds	r1, r3, #4
 800104a:	6031      	str	r1, [r6, #0]
 800104c:	0606      	lsls	r6, r0, #24
 800104e:	d501      	bpl.n	8001054 <_printf_i+0xbc>
 8001050:	681d      	ldr	r5, [r3, #0]
 8001052:	e003      	b.n	800105c <_printf_i+0xc4>
 8001054:	0645      	lsls	r5, r0, #25
 8001056:	d5fb      	bpl.n	8001050 <_printf_i+0xb8>
 8001058:	f9b3 5000 	ldrsh.w	r5, [r3]
 800105c:	2d00      	cmp	r5, #0
 800105e:	da03      	bge.n	8001068 <_printf_i+0xd0>
 8001060:	232d      	movs	r3, #45	@ 0x2d
 8001062:	426d      	negs	r5, r5
 8001064:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001068:	4858      	ldr	r0, [pc, #352]	@ (80011cc <_printf_i+0x234>)
 800106a:	230a      	movs	r3, #10
 800106c:	e011      	b.n	8001092 <_printf_i+0xfa>
 800106e:	6821      	ldr	r1, [r4, #0]
 8001070:	6833      	ldr	r3, [r6, #0]
 8001072:	0608      	lsls	r0, r1, #24
 8001074:	f853 5b04 	ldr.w	r5, [r3], #4
 8001078:	d402      	bmi.n	8001080 <_printf_i+0xe8>
 800107a:	0649      	lsls	r1, r1, #25
 800107c:	bf48      	it	mi
 800107e:	b2ad      	uxthmi	r5, r5
 8001080:	2f6f      	cmp	r7, #111	@ 0x6f
 8001082:	4852      	ldr	r0, [pc, #328]	@ (80011cc <_printf_i+0x234>)
 8001084:	6033      	str	r3, [r6, #0]
 8001086:	bf14      	ite	ne
 8001088:	230a      	movne	r3, #10
 800108a:	2308      	moveq	r3, #8
 800108c:	2100      	movs	r1, #0
 800108e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001092:	6866      	ldr	r6, [r4, #4]
 8001094:	60a6      	str	r6, [r4, #8]
 8001096:	2e00      	cmp	r6, #0
 8001098:	db05      	blt.n	80010a6 <_printf_i+0x10e>
 800109a:	6821      	ldr	r1, [r4, #0]
 800109c:	432e      	orrs	r6, r5
 800109e:	f021 0104 	bic.w	r1, r1, #4
 80010a2:	6021      	str	r1, [r4, #0]
 80010a4:	d04b      	beq.n	800113e <_printf_i+0x1a6>
 80010a6:	4616      	mov	r6, r2
 80010a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80010ac:	fb03 5711 	mls	r7, r3, r1, r5
 80010b0:	5dc7      	ldrb	r7, [r0, r7]
 80010b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80010b6:	462f      	mov	r7, r5
 80010b8:	42bb      	cmp	r3, r7
 80010ba:	460d      	mov	r5, r1
 80010bc:	d9f4      	bls.n	80010a8 <_printf_i+0x110>
 80010be:	2b08      	cmp	r3, #8
 80010c0:	d10b      	bne.n	80010da <_printf_i+0x142>
 80010c2:	6823      	ldr	r3, [r4, #0]
 80010c4:	07df      	lsls	r7, r3, #31
 80010c6:	d508      	bpl.n	80010da <_printf_i+0x142>
 80010c8:	6923      	ldr	r3, [r4, #16]
 80010ca:	6861      	ldr	r1, [r4, #4]
 80010cc:	4299      	cmp	r1, r3
 80010ce:	bfde      	ittt	le
 80010d0:	2330      	movle	r3, #48	@ 0x30
 80010d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80010d6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80010da:	1b92      	subs	r2, r2, r6
 80010dc:	6122      	str	r2, [r4, #16]
 80010de:	f8cd a000 	str.w	sl, [sp]
 80010e2:	464b      	mov	r3, r9
 80010e4:	aa03      	add	r2, sp, #12
 80010e6:	4621      	mov	r1, r4
 80010e8:	4640      	mov	r0, r8
 80010ea:	f7ff fee7 	bl	8000ebc <_printf_common>
 80010ee:	3001      	adds	r0, #1
 80010f0:	d14a      	bne.n	8001188 <_printf_i+0x1f0>
 80010f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010f6:	b004      	add	sp, #16
 80010f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010fc:	6823      	ldr	r3, [r4, #0]
 80010fe:	f043 0320 	orr.w	r3, r3, #32
 8001102:	6023      	str	r3, [r4, #0]
 8001104:	4832      	ldr	r0, [pc, #200]	@ (80011d0 <_printf_i+0x238>)
 8001106:	2778      	movs	r7, #120	@ 0x78
 8001108:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800110c:	6823      	ldr	r3, [r4, #0]
 800110e:	6831      	ldr	r1, [r6, #0]
 8001110:	061f      	lsls	r7, r3, #24
 8001112:	f851 5b04 	ldr.w	r5, [r1], #4
 8001116:	d402      	bmi.n	800111e <_printf_i+0x186>
 8001118:	065f      	lsls	r7, r3, #25
 800111a:	bf48      	it	mi
 800111c:	b2ad      	uxthmi	r5, r5
 800111e:	6031      	str	r1, [r6, #0]
 8001120:	07d9      	lsls	r1, r3, #31
 8001122:	bf44      	itt	mi
 8001124:	f043 0320 	orrmi.w	r3, r3, #32
 8001128:	6023      	strmi	r3, [r4, #0]
 800112a:	b11d      	cbz	r5, 8001134 <_printf_i+0x19c>
 800112c:	2310      	movs	r3, #16
 800112e:	e7ad      	b.n	800108c <_printf_i+0xf4>
 8001130:	4826      	ldr	r0, [pc, #152]	@ (80011cc <_printf_i+0x234>)
 8001132:	e7e9      	b.n	8001108 <_printf_i+0x170>
 8001134:	6823      	ldr	r3, [r4, #0]
 8001136:	f023 0320 	bic.w	r3, r3, #32
 800113a:	6023      	str	r3, [r4, #0]
 800113c:	e7f6      	b.n	800112c <_printf_i+0x194>
 800113e:	4616      	mov	r6, r2
 8001140:	e7bd      	b.n	80010be <_printf_i+0x126>
 8001142:	6833      	ldr	r3, [r6, #0]
 8001144:	6825      	ldr	r5, [r4, #0]
 8001146:	6961      	ldr	r1, [r4, #20]
 8001148:	1d18      	adds	r0, r3, #4
 800114a:	6030      	str	r0, [r6, #0]
 800114c:	062e      	lsls	r6, r5, #24
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	d501      	bpl.n	8001156 <_printf_i+0x1be>
 8001152:	6019      	str	r1, [r3, #0]
 8001154:	e002      	b.n	800115c <_printf_i+0x1c4>
 8001156:	0668      	lsls	r0, r5, #25
 8001158:	d5fb      	bpl.n	8001152 <_printf_i+0x1ba>
 800115a:	8019      	strh	r1, [r3, #0]
 800115c:	2300      	movs	r3, #0
 800115e:	6123      	str	r3, [r4, #16]
 8001160:	4616      	mov	r6, r2
 8001162:	e7bc      	b.n	80010de <_printf_i+0x146>
 8001164:	6833      	ldr	r3, [r6, #0]
 8001166:	1d1a      	adds	r2, r3, #4
 8001168:	6032      	str	r2, [r6, #0]
 800116a:	681e      	ldr	r6, [r3, #0]
 800116c:	6862      	ldr	r2, [r4, #4]
 800116e:	2100      	movs	r1, #0
 8001170:	4630      	mov	r0, r6
 8001172:	f7ff f835 	bl	80001e0 <memchr>
 8001176:	b108      	cbz	r0, 800117c <_printf_i+0x1e4>
 8001178:	1b80      	subs	r0, r0, r6
 800117a:	6060      	str	r0, [r4, #4]
 800117c:	6863      	ldr	r3, [r4, #4]
 800117e:	6123      	str	r3, [r4, #16]
 8001180:	2300      	movs	r3, #0
 8001182:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001186:	e7aa      	b.n	80010de <_printf_i+0x146>
 8001188:	6923      	ldr	r3, [r4, #16]
 800118a:	4632      	mov	r2, r6
 800118c:	4649      	mov	r1, r9
 800118e:	4640      	mov	r0, r8
 8001190:	47d0      	blx	sl
 8001192:	3001      	adds	r0, #1
 8001194:	d0ad      	beq.n	80010f2 <_printf_i+0x15a>
 8001196:	6823      	ldr	r3, [r4, #0]
 8001198:	079b      	lsls	r3, r3, #30
 800119a:	d413      	bmi.n	80011c4 <_printf_i+0x22c>
 800119c:	68e0      	ldr	r0, [r4, #12]
 800119e:	9b03      	ldr	r3, [sp, #12]
 80011a0:	4298      	cmp	r0, r3
 80011a2:	bfb8      	it	lt
 80011a4:	4618      	movlt	r0, r3
 80011a6:	e7a6      	b.n	80010f6 <_printf_i+0x15e>
 80011a8:	2301      	movs	r3, #1
 80011aa:	4632      	mov	r2, r6
 80011ac:	4649      	mov	r1, r9
 80011ae:	4640      	mov	r0, r8
 80011b0:	47d0      	blx	sl
 80011b2:	3001      	adds	r0, #1
 80011b4:	d09d      	beq.n	80010f2 <_printf_i+0x15a>
 80011b6:	3501      	adds	r5, #1
 80011b8:	68e3      	ldr	r3, [r4, #12]
 80011ba:	9903      	ldr	r1, [sp, #12]
 80011bc:	1a5b      	subs	r3, r3, r1
 80011be:	42ab      	cmp	r3, r5
 80011c0:	dcf2      	bgt.n	80011a8 <_printf_i+0x210>
 80011c2:	e7eb      	b.n	800119c <_printf_i+0x204>
 80011c4:	2500      	movs	r5, #0
 80011c6:	f104 0619 	add.w	r6, r4, #25
 80011ca:	e7f5      	b.n	80011b8 <_printf_i+0x220>
 80011cc:	080015b6 	.word	0x080015b6
 80011d0:	080015c7 	.word	0x080015c7

080011d4 <__sflush_r>:
 80011d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80011d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011dc:	0716      	lsls	r6, r2, #28
 80011de:	4605      	mov	r5, r0
 80011e0:	460c      	mov	r4, r1
 80011e2:	d454      	bmi.n	800128e <__sflush_r+0xba>
 80011e4:	684b      	ldr	r3, [r1, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	dc02      	bgt.n	80011f0 <__sflush_r+0x1c>
 80011ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	dd48      	ble.n	8001282 <__sflush_r+0xae>
 80011f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80011f2:	2e00      	cmp	r6, #0
 80011f4:	d045      	beq.n	8001282 <__sflush_r+0xae>
 80011f6:	2300      	movs	r3, #0
 80011f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80011fc:	682f      	ldr	r7, [r5, #0]
 80011fe:	6a21      	ldr	r1, [r4, #32]
 8001200:	602b      	str	r3, [r5, #0]
 8001202:	d030      	beq.n	8001266 <__sflush_r+0x92>
 8001204:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001206:	89a3      	ldrh	r3, [r4, #12]
 8001208:	0759      	lsls	r1, r3, #29
 800120a:	d505      	bpl.n	8001218 <__sflush_r+0x44>
 800120c:	6863      	ldr	r3, [r4, #4]
 800120e:	1ad2      	subs	r2, r2, r3
 8001210:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001212:	b10b      	cbz	r3, 8001218 <__sflush_r+0x44>
 8001214:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001216:	1ad2      	subs	r2, r2, r3
 8001218:	2300      	movs	r3, #0
 800121a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800121c:	6a21      	ldr	r1, [r4, #32]
 800121e:	4628      	mov	r0, r5
 8001220:	47b0      	blx	r6
 8001222:	1c43      	adds	r3, r0, #1
 8001224:	89a3      	ldrh	r3, [r4, #12]
 8001226:	d106      	bne.n	8001236 <__sflush_r+0x62>
 8001228:	6829      	ldr	r1, [r5, #0]
 800122a:	291d      	cmp	r1, #29
 800122c:	d82b      	bhi.n	8001286 <__sflush_r+0xb2>
 800122e:	4a2a      	ldr	r2, [pc, #168]	@ (80012d8 <__sflush_r+0x104>)
 8001230:	40ca      	lsrs	r2, r1
 8001232:	07d6      	lsls	r6, r2, #31
 8001234:	d527      	bpl.n	8001286 <__sflush_r+0xb2>
 8001236:	2200      	movs	r2, #0
 8001238:	6062      	str	r2, [r4, #4]
 800123a:	04d9      	lsls	r1, r3, #19
 800123c:	6922      	ldr	r2, [r4, #16]
 800123e:	6022      	str	r2, [r4, #0]
 8001240:	d504      	bpl.n	800124c <__sflush_r+0x78>
 8001242:	1c42      	adds	r2, r0, #1
 8001244:	d101      	bne.n	800124a <__sflush_r+0x76>
 8001246:	682b      	ldr	r3, [r5, #0]
 8001248:	b903      	cbnz	r3, 800124c <__sflush_r+0x78>
 800124a:	6560      	str	r0, [r4, #84]	@ 0x54
 800124c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800124e:	602f      	str	r7, [r5, #0]
 8001250:	b1b9      	cbz	r1, 8001282 <__sflush_r+0xae>
 8001252:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001256:	4299      	cmp	r1, r3
 8001258:	d002      	beq.n	8001260 <__sflush_r+0x8c>
 800125a:	4628      	mov	r0, r5
 800125c:	f7ff fbf4 	bl	8000a48 <_free_r>
 8001260:	2300      	movs	r3, #0
 8001262:	6363      	str	r3, [r4, #52]	@ 0x34
 8001264:	e00d      	b.n	8001282 <__sflush_r+0xae>
 8001266:	2301      	movs	r3, #1
 8001268:	4628      	mov	r0, r5
 800126a:	47b0      	blx	r6
 800126c:	4602      	mov	r2, r0
 800126e:	1c50      	adds	r0, r2, #1
 8001270:	d1c9      	bne.n	8001206 <__sflush_r+0x32>
 8001272:	682b      	ldr	r3, [r5, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d0c6      	beq.n	8001206 <__sflush_r+0x32>
 8001278:	2b1d      	cmp	r3, #29
 800127a:	d001      	beq.n	8001280 <__sflush_r+0xac>
 800127c:	2b16      	cmp	r3, #22
 800127e:	d11e      	bne.n	80012be <__sflush_r+0xea>
 8001280:	602f      	str	r7, [r5, #0]
 8001282:	2000      	movs	r0, #0
 8001284:	e022      	b.n	80012cc <__sflush_r+0xf8>
 8001286:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800128a:	b21b      	sxth	r3, r3
 800128c:	e01b      	b.n	80012c6 <__sflush_r+0xf2>
 800128e:	690f      	ldr	r7, [r1, #16]
 8001290:	2f00      	cmp	r7, #0
 8001292:	d0f6      	beq.n	8001282 <__sflush_r+0xae>
 8001294:	0793      	lsls	r3, r2, #30
 8001296:	680e      	ldr	r6, [r1, #0]
 8001298:	bf08      	it	eq
 800129a:	694b      	ldreq	r3, [r1, #20]
 800129c:	600f      	str	r7, [r1, #0]
 800129e:	bf18      	it	ne
 80012a0:	2300      	movne	r3, #0
 80012a2:	eba6 0807 	sub.w	r8, r6, r7
 80012a6:	608b      	str	r3, [r1, #8]
 80012a8:	f1b8 0f00 	cmp.w	r8, #0
 80012ac:	dde9      	ble.n	8001282 <__sflush_r+0xae>
 80012ae:	6a21      	ldr	r1, [r4, #32]
 80012b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80012b2:	4643      	mov	r3, r8
 80012b4:	463a      	mov	r2, r7
 80012b6:	4628      	mov	r0, r5
 80012b8:	47b0      	blx	r6
 80012ba:	2800      	cmp	r0, #0
 80012bc:	dc08      	bgt.n	80012d0 <__sflush_r+0xfc>
 80012be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012c6:	81a3      	strh	r3, [r4, #12]
 80012c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012d0:	4407      	add	r7, r0
 80012d2:	eba8 0800 	sub.w	r8, r8, r0
 80012d6:	e7e7      	b.n	80012a8 <__sflush_r+0xd4>
 80012d8:	20400001 	.word	0x20400001

080012dc <_fflush_r>:
 80012dc:	b538      	push	{r3, r4, r5, lr}
 80012de:	690b      	ldr	r3, [r1, #16]
 80012e0:	4605      	mov	r5, r0
 80012e2:	460c      	mov	r4, r1
 80012e4:	b913      	cbnz	r3, 80012ec <_fflush_r+0x10>
 80012e6:	2500      	movs	r5, #0
 80012e8:	4628      	mov	r0, r5
 80012ea:	bd38      	pop	{r3, r4, r5, pc}
 80012ec:	b118      	cbz	r0, 80012f6 <_fflush_r+0x1a>
 80012ee:	6a03      	ldr	r3, [r0, #32]
 80012f0:	b90b      	cbnz	r3, 80012f6 <_fflush_r+0x1a>
 80012f2:	f7ff faa1 	bl	8000838 <__sinit>
 80012f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d0f3      	beq.n	80012e6 <_fflush_r+0xa>
 80012fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001300:	07d0      	lsls	r0, r2, #31
 8001302:	d404      	bmi.n	800130e <_fflush_r+0x32>
 8001304:	0599      	lsls	r1, r3, #22
 8001306:	d402      	bmi.n	800130e <_fflush_r+0x32>
 8001308:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800130a:	f7ff fb9a 	bl	8000a42 <__retarget_lock_acquire_recursive>
 800130e:	4628      	mov	r0, r5
 8001310:	4621      	mov	r1, r4
 8001312:	f7ff ff5f 	bl	80011d4 <__sflush_r>
 8001316:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001318:	07da      	lsls	r2, r3, #31
 800131a:	4605      	mov	r5, r0
 800131c:	d4e4      	bmi.n	80012e8 <_fflush_r+0xc>
 800131e:	89a3      	ldrh	r3, [r4, #12]
 8001320:	059b      	lsls	r3, r3, #22
 8001322:	d4e1      	bmi.n	80012e8 <_fflush_r+0xc>
 8001324:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001326:	f7ff fb8d 	bl	8000a44 <__retarget_lock_release_recursive>
 800132a:	e7dd      	b.n	80012e8 <_fflush_r+0xc>

0800132c <__swbuf_r>:
 800132c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800132e:	460e      	mov	r6, r1
 8001330:	4614      	mov	r4, r2
 8001332:	4605      	mov	r5, r0
 8001334:	b118      	cbz	r0, 800133e <__swbuf_r+0x12>
 8001336:	6a03      	ldr	r3, [r0, #32]
 8001338:	b90b      	cbnz	r3, 800133e <__swbuf_r+0x12>
 800133a:	f7ff fa7d 	bl	8000838 <__sinit>
 800133e:	69a3      	ldr	r3, [r4, #24]
 8001340:	60a3      	str	r3, [r4, #8]
 8001342:	89a3      	ldrh	r3, [r4, #12]
 8001344:	071a      	lsls	r2, r3, #28
 8001346:	d501      	bpl.n	800134c <__swbuf_r+0x20>
 8001348:	6923      	ldr	r3, [r4, #16]
 800134a:	b943      	cbnz	r3, 800135e <__swbuf_r+0x32>
 800134c:	4621      	mov	r1, r4
 800134e:	4628      	mov	r0, r5
 8001350:	f000 f82a 	bl	80013a8 <__swsetup_r>
 8001354:	b118      	cbz	r0, 800135e <__swbuf_r+0x32>
 8001356:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800135a:	4638      	mov	r0, r7
 800135c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800135e:	6823      	ldr	r3, [r4, #0]
 8001360:	6922      	ldr	r2, [r4, #16]
 8001362:	1a98      	subs	r0, r3, r2
 8001364:	6963      	ldr	r3, [r4, #20]
 8001366:	b2f6      	uxtb	r6, r6
 8001368:	4283      	cmp	r3, r0
 800136a:	4637      	mov	r7, r6
 800136c:	dc05      	bgt.n	800137a <__swbuf_r+0x4e>
 800136e:	4621      	mov	r1, r4
 8001370:	4628      	mov	r0, r5
 8001372:	f7ff ffb3 	bl	80012dc <_fflush_r>
 8001376:	2800      	cmp	r0, #0
 8001378:	d1ed      	bne.n	8001356 <__swbuf_r+0x2a>
 800137a:	68a3      	ldr	r3, [r4, #8]
 800137c:	3b01      	subs	r3, #1
 800137e:	60a3      	str	r3, [r4, #8]
 8001380:	6823      	ldr	r3, [r4, #0]
 8001382:	1c5a      	adds	r2, r3, #1
 8001384:	6022      	str	r2, [r4, #0]
 8001386:	701e      	strb	r6, [r3, #0]
 8001388:	6962      	ldr	r2, [r4, #20]
 800138a:	1c43      	adds	r3, r0, #1
 800138c:	429a      	cmp	r2, r3
 800138e:	d004      	beq.n	800139a <__swbuf_r+0x6e>
 8001390:	89a3      	ldrh	r3, [r4, #12]
 8001392:	07db      	lsls	r3, r3, #31
 8001394:	d5e1      	bpl.n	800135a <__swbuf_r+0x2e>
 8001396:	2e0a      	cmp	r6, #10
 8001398:	d1df      	bne.n	800135a <__swbuf_r+0x2e>
 800139a:	4621      	mov	r1, r4
 800139c:	4628      	mov	r0, r5
 800139e:	f7ff ff9d 	bl	80012dc <_fflush_r>
 80013a2:	2800      	cmp	r0, #0
 80013a4:	d0d9      	beq.n	800135a <__swbuf_r+0x2e>
 80013a6:	e7d6      	b.n	8001356 <__swbuf_r+0x2a>

080013a8 <__swsetup_r>:
 80013a8:	b538      	push	{r3, r4, r5, lr}
 80013aa:	4b29      	ldr	r3, [pc, #164]	@ (8001450 <__swsetup_r+0xa8>)
 80013ac:	4605      	mov	r5, r0
 80013ae:	6818      	ldr	r0, [r3, #0]
 80013b0:	460c      	mov	r4, r1
 80013b2:	b118      	cbz	r0, 80013bc <__swsetup_r+0x14>
 80013b4:	6a03      	ldr	r3, [r0, #32]
 80013b6:	b90b      	cbnz	r3, 80013bc <__swsetup_r+0x14>
 80013b8:	f7ff fa3e 	bl	8000838 <__sinit>
 80013bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013c0:	0719      	lsls	r1, r3, #28
 80013c2:	d422      	bmi.n	800140a <__swsetup_r+0x62>
 80013c4:	06da      	lsls	r2, r3, #27
 80013c6:	d407      	bmi.n	80013d8 <__swsetup_r+0x30>
 80013c8:	2209      	movs	r2, #9
 80013ca:	602a      	str	r2, [r5, #0]
 80013cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013d0:	81a3      	strh	r3, [r4, #12]
 80013d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013d6:	e033      	b.n	8001440 <__swsetup_r+0x98>
 80013d8:	0758      	lsls	r0, r3, #29
 80013da:	d512      	bpl.n	8001402 <__swsetup_r+0x5a>
 80013dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80013de:	b141      	cbz	r1, 80013f2 <__swsetup_r+0x4a>
 80013e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80013e4:	4299      	cmp	r1, r3
 80013e6:	d002      	beq.n	80013ee <__swsetup_r+0x46>
 80013e8:	4628      	mov	r0, r5
 80013ea:	f7ff fb2d 	bl	8000a48 <_free_r>
 80013ee:	2300      	movs	r3, #0
 80013f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80013f2:	89a3      	ldrh	r3, [r4, #12]
 80013f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80013f8:	81a3      	strh	r3, [r4, #12]
 80013fa:	2300      	movs	r3, #0
 80013fc:	6063      	str	r3, [r4, #4]
 80013fe:	6923      	ldr	r3, [r4, #16]
 8001400:	6023      	str	r3, [r4, #0]
 8001402:	89a3      	ldrh	r3, [r4, #12]
 8001404:	f043 0308 	orr.w	r3, r3, #8
 8001408:	81a3      	strh	r3, [r4, #12]
 800140a:	6923      	ldr	r3, [r4, #16]
 800140c:	b94b      	cbnz	r3, 8001422 <__swsetup_r+0x7a>
 800140e:	89a3      	ldrh	r3, [r4, #12]
 8001410:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001414:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001418:	d003      	beq.n	8001422 <__swsetup_r+0x7a>
 800141a:	4621      	mov	r1, r4
 800141c:	4628      	mov	r0, r5
 800141e:	f000 f84f 	bl	80014c0 <__smakebuf_r>
 8001422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001426:	f013 0201 	ands.w	r2, r3, #1
 800142a:	d00a      	beq.n	8001442 <__swsetup_r+0x9a>
 800142c:	2200      	movs	r2, #0
 800142e:	60a2      	str	r2, [r4, #8]
 8001430:	6962      	ldr	r2, [r4, #20]
 8001432:	4252      	negs	r2, r2
 8001434:	61a2      	str	r2, [r4, #24]
 8001436:	6922      	ldr	r2, [r4, #16]
 8001438:	b942      	cbnz	r2, 800144c <__swsetup_r+0xa4>
 800143a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800143e:	d1c5      	bne.n	80013cc <__swsetup_r+0x24>
 8001440:	bd38      	pop	{r3, r4, r5, pc}
 8001442:	0799      	lsls	r1, r3, #30
 8001444:	bf58      	it	pl
 8001446:	6962      	ldrpl	r2, [r4, #20]
 8001448:	60a2      	str	r2, [r4, #8]
 800144a:	e7f4      	b.n	8001436 <__swsetup_r+0x8e>
 800144c:	2000      	movs	r0, #0
 800144e:	e7f7      	b.n	8001440 <__swsetup_r+0x98>
 8001450:	20000010 	.word	0x20000010

08001454 <_sbrk_r>:
 8001454:	b538      	push	{r3, r4, r5, lr}
 8001456:	4d06      	ldr	r5, [pc, #24]	@ (8001470 <_sbrk_r+0x1c>)
 8001458:	2300      	movs	r3, #0
 800145a:	4604      	mov	r4, r0
 800145c:	4608      	mov	r0, r1
 800145e:	602b      	str	r3, [r5, #0]
 8001460:	f7ff f854 	bl	800050c <_sbrk>
 8001464:	1c43      	adds	r3, r0, #1
 8001466:	d102      	bne.n	800146e <_sbrk_r+0x1a>
 8001468:	682b      	ldr	r3, [r5, #0]
 800146a:	b103      	cbz	r3, 800146e <_sbrk_r+0x1a>
 800146c:	6023      	str	r3, [r4, #0]
 800146e:	bd38      	pop	{r3, r4, r5, pc}
 8001470:	200001c0 	.word	0x200001c0

08001474 <__swhatbuf_r>:
 8001474:	b570      	push	{r4, r5, r6, lr}
 8001476:	460c      	mov	r4, r1
 8001478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800147c:	2900      	cmp	r1, #0
 800147e:	b096      	sub	sp, #88	@ 0x58
 8001480:	4615      	mov	r5, r2
 8001482:	461e      	mov	r6, r3
 8001484:	da0d      	bge.n	80014a2 <__swhatbuf_r+0x2e>
 8001486:	89a3      	ldrh	r3, [r4, #12]
 8001488:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800148c:	f04f 0100 	mov.w	r1, #0
 8001490:	bf14      	ite	ne
 8001492:	2340      	movne	r3, #64	@ 0x40
 8001494:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001498:	2000      	movs	r0, #0
 800149a:	6031      	str	r1, [r6, #0]
 800149c:	602b      	str	r3, [r5, #0]
 800149e:	b016      	add	sp, #88	@ 0x58
 80014a0:	bd70      	pop	{r4, r5, r6, pc}
 80014a2:	466a      	mov	r2, sp
 80014a4:	f000 f848 	bl	8001538 <_fstat_r>
 80014a8:	2800      	cmp	r0, #0
 80014aa:	dbec      	blt.n	8001486 <__swhatbuf_r+0x12>
 80014ac:	9901      	ldr	r1, [sp, #4]
 80014ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80014b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80014b6:	4259      	negs	r1, r3
 80014b8:	4159      	adcs	r1, r3
 80014ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014be:	e7eb      	b.n	8001498 <__swhatbuf_r+0x24>

080014c0 <__smakebuf_r>:
 80014c0:	898b      	ldrh	r3, [r1, #12]
 80014c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80014c4:	079d      	lsls	r5, r3, #30
 80014c6:	4606      	mov	r6, r0
 80014c8:	460c      	mov	r4, r1
 80014ca:	d507      	bpl.n	80014dc <__smakebuf_r+0x1c>
 80014cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80014d0:	6023      	str	r3, [r4, #0]
 80014d2:	6123      	str	r3, [r4, #16]
 80014d4:	2301      	movs	r3, #1
 80014d6:	6163      	str	r3, [r4, #20]
 80014d8:	b003      	add	sp, #12
 80014da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014dc:	ab01      	add	r3, sp, #4
 80014de:	466a      	mov	r2, sp
 80014e0:	f7ff ffc8 	bl	8001474 <__swhatbuf_r>
 80014e4:	9f00      	ldr	r7, [sp, #0]
 80014e6:	4605      	mov	r5, r0
 80014e8:	4639      	mov	r1, r7
 80014ea:	4630      	mov	r0, r6
 80014ec:	f7ff fb18 	bl	8000b20 <_malloc_r>
 80014f0:	b948      	cbnz	r0, 8001506 <__smakebuf_r+0x46>
 80014f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014f6:	059a      	lsls	r2, r3, #22
 80014f8:	d4ee      	bmi.n	80014d8 <__smakebuf_r+0x18>
 80014fa:	f023 0303 	bic.w	r3, r3, #3
 80014fe:	f043 0302 	orr.w	r3, r3, #2
 8001502:	81a3      	strh	r3, [r4, #12]
 8001504:	e7e2      	b.n	80014cc <__smakebuf_r+0xc>
 8001506:	89a3      	ldrh	r3, [r4, #12]
 8001508:	6020      	str	r0, [r4, #0]
 800150a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800150e:	81a3      	strh	r3, [r4, #12]
 8001510:	9b01      	ldr	r3, [sp, #4]
 8001512:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001516:	b15b      	cbz	r3, 8001530 <__smakebuf_r+0x70>
 8001518:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800151c:	4630      	mov	r0, r6
 800151e:	f000 f81d 	bl	800155c <_isatty_r>
 8001522:	b128      	cbz	r0, 8001530 <__smakebuf_r+0x70>
 8001524:	89a3      	ldrh	r3, [r4, #12]
 8001526:	f023 0303 	bic.w	r3, r3, #3
 800152a:	f043 0301 	orr.w	r3, r3, #1
 800152e:	81a3      	strh	r3, [r4, #12]
 8001530:	89a3      	ldrh	r3, [r4, #12]
 8001532:	431d      	orrs	r5, r3
 8001534:	81a5      	strh	r5, [r4, #12]
 8001536:	e7cf      	b.n	80014d8 <__smakebuf_r+0x18>

08001538 <_fstat_r>:
 8001538:	b538      	push	{r3, r4, r5, lr}
 800153a:	4d07      	ldr	r5, [pc, #28]	@ (8001558 <_fstat_r+0x20>)
 800153c:	2300      	movs	r3, #0
 800153e:	4604      	mov	r4, r0
 8001540:	4608      	mov	r0, r1
 8001542:	4611      	mov	r1, r2
 8001544:	602b      	str	r3, [r5, #0]
 8001546:	f7fe ffb9 	bl	80004bc <_fstat>
 800154a:	1c43      	adds	r3, r0, #1
 800154c:	d102      	bne.n	8001554 <_fstat_r+0x1c>
 800154e:	682b      	ldr	r3, [r5, #0]
 8001550:	b103      	cbz	r3, 8001554 <_fstat_r+0x1c>
 8001552:	6023      	str	r3, [r4, #0]
 8001554:	bd38      	pop	{r3, r4, r5, pc}
 8001556:	bf00      	nop
 8001558:	200001c0 	.word	0x200001c0

0800155c <_isatty_r>:
 800155c:	b538      	push	{r3, r4, r5, lr}
 800155e:	4d06      	ldr	r5, [pc, #24]	@ (8001578 <_isatty_r+0x1c>)
 8001560:	2300      	movs	r3, #0
 8001562:	4604      	mov	r4, r0
 8001564:	4608      	mov	r0, r1
 8001566:	602b      	str	r3, [r5, #0]
 8001568:	f7fe ffb8 	bl	80004dc <_isatty>
 800156c:	1c43      	adds	r3, r0, #1
 800156e:	d102      	bne.n	8001576 <_isatty_r+0x1a>
 8001570:	682b      	ldr	r3, [r5, #0]
 8001572:	b103      	cbz	r3, 8001576 <_isatty_r+0x1a>
 8001574:	6023      	str	r3, [r4, #0]
 8001576:	bd38      	pop	{r3, r4, r5, pc}
 8001578:	200001c0 	.word	0x200001c0

0800157c <_init>:
 800157c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800157e:	bf00      	nop
 8001580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001582:	bc08      	pop	{r3}
 8001584:	469e      	mov	lr, r3
 8001586:	4770      	bx	lr

08001588 <_fini>:
 8001588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800158a:	bf00      	nop
 800158c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800158e:	bc08      	pop	{r3}
 8001590:	469e      	mov	lr, r3
 8001592:	4770      	bx	lr
